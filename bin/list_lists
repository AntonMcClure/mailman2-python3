#! @PYTHON@
#
# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

"""List all mailing lists.

Usage: %(program)s [options]

Where:

    -a / --advertised
        List only those mailing lists that are publically advertised

    -p / --public-archive
        List only those lists with public archives.

    --virtual-host-overview=domain
    -V domain
        List only those mailing lists that are homed to the given virtual
        domain.  This only works if the VIRTUAL_HOST_OVERVIEW variable is
        set.

    -b / --bare
        Displays only the list name, with no description.

    -h / --help
        Print this text and exit.

"""

import re
import sys
import argparse
import paths

from Mailman import mm_cfg
from Mailman import MailList
from Mailman import Utils
from Mailman import Errors
from Mailman.i18n import C_

program = sys.argv[0]

def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    print(C_(__doc__), file=fd)
    if msg:
        print(msg, file=fd)
    sys.exit(code)


def main():
    parser = argparse.ArgumentParser(description='List all mailing lists.')
    parser.add_argument('-a', '--advertised', action='store_true',
                       help='List only those mailing lists that are publically advertised')
    parser.add_argument('-p', '--public-archive', action='store_true',
                       help='List only those lists with public archives')
    parser.add_argument('-V', '--virtual-host-overview',
                       help='List only those mailing lists that are homed to the given virtual domain')
    parser.add_argument('-b', '--bare', action='store_true',
                       help='Displays only the list name, with no description')

    args = parser.parse_args()

    names = Utils.list_names()
    names.sort()

    mlists = []
    longest = 0
    for n in names:
        try:
            mlist = MailList.MailList(n, lock=0)
        except Errors.MMUnknownListError:
            # The list could have been deleted by another process.
            continue
        if args.advertised and not mlist.advertised:
            continue
        if args.public_archive and mlist.archive_private:
            continue
        if (args.virtual_host_overview and mm_cfg.VIRTUAL_HOST_OVERVIEW and
               not re.search('://%s/' % re.escape(args.virtual_host_overview),
                   mlist.web_page_url,
                   re.IGNORECASE)):
            continue
        mlists.append(mlist)
        longest = max(len(mlist.real_name), longest)

    if not mlists and not args.bare:
        print(C_('No matching mailing lists found'))
        return

    if not args.bare:
        print(len(mlists), C_('matching mailing lists found:'))

    format = '%%%ds - %%.%ds' % (longest, 77 - longest)
    for mlist in mlists:
        if args.bare:
            print(mlist.internal_name())
        else:
            description = mlist.description or C_('[no description available]')
            print('   ', format % (mlist.real_name, description))


if __name__ == '__main__':
    main()
