#! @PYTHON@

# Copyright (C) 2001-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

"""Primary start-up and shutdown script for Mailman's qrunner daemon.

This script starts, stops, and restarts the main Mailman queue runners, making
sure that the various long-running qrunners are still alive and kicking.  It
does this by forking and exec'ing the qrunners and waiting on their pids.
When it detects a subprocess has exited, it may restart it.

The qrunners respond to SIGINT, SIGTERM, and SIGHUP.  SIGINT and SIGTERM both
cause the qrunners to exit cleanly, but the master will only restart qrunners
that have exited due to a SIGINT.  SIGHUP causes the master and the qrunners
to close their log files, and reopen then upon the next printed message.

The master also responds to SIGINT, SIGTERM, and SIGHUP, which it simply
passes on to the qrunners (note that the master will close and reopen its own
log files on receipt of a SIGHUP).  The master also leaves its own process id
in the file data/master-qrunner.pid but you normally don't need to use this
pid directly.  The `start', `stop', `restart', and `reopen' commands handle
everything for you.

Usage: %(PROGRAM)s [options] [ start | stop | restart | reopen | status ]

Options:

    -n/--no-restart
        Don't restart the qrunners when they exit because of an error or a
        SIGINT.  They are never restarted if they exit in response to a
        SIGTERM.  Use this only for debugging.  Only useful if the `start'
        command is given.

    -u/--run-as-user
        Normally, this script will refuse to run if the user id and group id
        are not set to the `mailman' user and group (as defined when you
        configured Mailman).  If run as root, this script will change to this
        user and group before the check is made.

        This can be inconvenient for testing and debugging purposes, so the -u
        flag means that the step that sets and checks the uid/gid is skipped,
        and the program is run as the current user and group.  This flag is
        not recommended for normal production environments.

        Note though, that if you run with -u and are not in the mailman group,
        you may have permission problems, such as begin unable to delete a
        list's archives through the web.  Tough luck!

    -s/--stale-lock-cleanup
        If mailmanctl finds an existing master lock, it will normally exit
        with an error message.  With this option, mailmanctl will perform an
        extra level of checking.  If a process matching the host/pid described
        in the lock file is running, mailmanctl will still exit, but if no
        matching process is found, mailmanctl will remove the apparently stale
        lock and make another attempt to claim the master lock.

    -q/--quiet
        Don't print status messages.  Error messages are still printed to
        standard error.

    -h/--help
        Print this message and exit.

Commands:

    start   - Start the master daemon and all qrunners.  Prints a message and
              exits if the master daemon is already running.

    stop    - Stops the master daemon and all qrunners.  After stopping, no
              more messages will be processed.

    restart - Restarts the qrunners, but not the master process.  Use this
              whenever you upgrade or update Mailman so that the qrunners will
              use the newly installed code.

    reopen  - This will close all log files, causing them to be re-opened the
              next time a message is written to them

    status  - Checks if all qrunners are running as expected.
"""

import sys
import os
import time
import argparse
import signal
import errno
import pwd
import grp
import socket
import psutil  # Add psutil import

import paths
from Mailman import mm_cfg
from Mailman import Utils
from Mailman import LockFile
from Mailman import Errors
from Mailman.MailList import MailList
from Mailman.i18n import C_
from Mailman.Logging.Syslog import syslog
from Mailman.Logging.Utils import LogStdErr

PROGRAM = sys.argv[0]
COMMASPACE = ', '
DOT = '.'

# Locking contantsa
LOCKFILE = os.path.join(mm_cfg.LOCK_DIR, mm_cfg.MASTER_LOCK_FILE)
# Since we wake up once per day and refresh the lock, the LOCK_LIFETIME
# needn't be (much) longer than SNOOZE.  We pad it 6 hours just to be safe.
LOCK_LIFETIME = mm_cfg.days(1) + mm_cfg.hours(6)
SNOOZE = mm_cfg.days(1)
MAX_RESTARTS = 10

# Global circuit breaker settings
GLOBAL_RESTART_WINDOW = 30  # 30 seconds window
GLOBAL_MAX_RESTARTS = 100   # Maximum restarts in window
_global_restart_times = []  # List of timestamps for restarts

LogStdErr('error', 'mailmanctl', manual_reprime=0)


def parse_args():
    parser = argparse.ArgumentParser(description='Primary start-up and shutdown script for Mailman\'s qrunner daemon.')
    parser.add_argument('command', choices=['start', 'stop', 'restart', 'reopen', 'status'],
                       help='Command to execute')
    parser.add_argument('-n', '--no-restart', action='store_true',
                       help='Don\'t restart the qrunners when they exit because of an error or a SIGINT')
    parser.add_argument('-u', '--run-as-user', action='store_true',
                       help='Run as current user instead of mailman user')
    parser.add_argument('-s', '--stale-lock-cleanup', action='store_true',
                       help='Clean up stale locks before starting')
    parser.add_argument('-q', '--quiet', action='store_true',
                       help='Don\'t print status messages')
    return parser.parse_args()


def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    # In Python 3, sys.argv[0] is already a string
    program = str(sys.argv[0])  # Ensure it's a string
    doc = C_(__doc__) % {'PROGRAM': program}  # Let C_() handle the translation and formatting
    print(doc, file=fd)
    if msg:
        print(msg, file=fd)
    sys.exit(code)


def kill_watcher(sig):
    try:
        with open(mm_cfg.PIDFILE, 'r') as fp:
            content = fp.read().strip().split()
            if len(content) >= 2:
                pid = int(content[0])
                hostname = content[1]
                if hostname != socket.gethostname():
                    print(C_('PID file hostname mismatch: expected %(expected)s, got %(got)s') % 
                          {'expected': socket.gethostname(), 'got': hostname}, file=sys.stderr)
                    return
            else:
                raise ValueError('Invalid PID file format')
    except (IOError, ValueError) as e:
        # For i18n convenience
        pidfile = mm_cfg.PIDFILE
        print(C_('PID unreadable in: %(pidfile)s'), file=sys.stderr)
        print(e, file=sys.stderr)
        print(C_('Is qrunner even running?'), file=sys.stderr)
        print(C_('Lock file path: %(lockfile)s') % {'lockfile': LOCKFILE}, file=sys.stderr)
        return
    try:
        os.kill(pid, sig)
    except OSError as e:
        if e.errno != errno.ESRCH: raise
        print(C_('No child with pid: %(pid)s'), file=sys.stderr)
        print(e, file=sys.stderr)
        print(C_('Stale pid file removed.'), file=sys.stderr)
        os.unlink(mm_cfg.PIDFILE)


def get_lock_data():
    # Return the hostname, pid, and tempfile
    try:
        with open(LOCKFILE) as fp:
            content = fp.read().strip().split()
            if len(content) != 2:
                syslog('error', 'Invalid lock file format in %s: expected "pid hostname"', LOCKFILE)
                raise LockFile.LockError('Invalid lock file format')
            try:
                pid = int(content[0])
                hostname = content[1]
            except ValueError as e:
                syslog('error', 'Invalid PID in lock file %s: %s', LOCKFILE, e)
                raise LockFile.LockError('Invalid PID in lock file')
            return hostname, pid, None  # tempfile is not used in this format
    except IOError as e:
        syslog('error', 'Could not read lock file %s: %s', LOCKFILE, e)
        raise LockFile.LockError('Could not read lock file')


def qrunner_state():
    # 1 if proc exists on host and is owned by mailman user
    # 0 if host matches but no proc or wrong owner
    # hostname if hostname doesn't match
    hostname, pid, tempfile = get_lock_data()
    if hostname != socket.gethostname():
        return hostname
    # Find out if the process exists by calling kill with a signal 0.
    try:
        os.kill(pid, 0)
        # Process exists, now check if it's owned by the mailman user
        mailman_uid = pwd.getpwnam(mm_cfg.MAILMAN_USER).pw_uid
        try:
            # Try to get process owner using platform-specific methods
            if os.name == 'posix':
                # On Unix-like systems, try to get process owner
                try:
                    # Try using /proc on Linux
                    if os.path.exists('/proc'):
                        with open(f'/proc/{pid}/status') as f:
                            for line in f:
                                if line.startswith('Uid:'):
                                    uid = int(line.split()[1])
                                    if uid != mailman_uid:
                                        syslog('error', 'Process %d exists but is owned by uid %d, not mailman user %d',
                                               pid, uid, mailman_uid)
                                        return 0
                                    break
                    else:
                        # On other Unix systems, we can't easily check the owner
                        # without external tools, so we'll assume it's valid
                        # if the process exists
                        return 1
                except (IOError, OSError) as e:
                    syslog('error', 'Error checking process %d ownership: %s', pid, str(e))
                    return 0
            else:
                # On non-Unix systems, we can't easily check the owner
                # without external tools, so we'll assume it's valid
                # if the process exists
                return 1
            return 1
        except Exception as e:
            syslog('error', 'Error checking process %d ownership: %s', pid, str(e))
            return 0
    except OSError as e:
        if e.errno != errno.ESRCH: raise
        return 0


def acquire_lock_1(force):
    # Be sure we can acquire the master qrunner lock.  If not, it means some
    # other master qrunner daemon is already going.
    lock = LockFile.LockFile(LOCKFILE, LOCK_LIFETIME)
    try:
        lock.lock(0.1)
        return lock
    except LockFile.TimeOutError:
        # Check if the lock is stale by examining the process
        status = qrunner_state()
        if status == 1:
            # Process exists and is running, so lock is valid
            raise
        # Lock appears to be stale - clean it up
        try:
            # Read the current lock file content
            with open(LOCKFILE) as fp:
                content = fp.read().strip()
                if content:
                    # Try to clean up any stale lock files
                    lock.clean_stale_locks()
        except (IOError, OSError) as e:
            syslog('error', 'Error cleaning up stale lock: %s', str(e))
        # Remove the lock file
        try:
            os.unlink(LOCKFILE)
        except OSError as e:
            if e.errno != errno.ENOENT:
                syslog('error', 'Error removing lock file: %s', str(e))
        # Try to acquire the lock again
        return acquire_lock_1(force=0)


def acquire_lock(force):
    try:
        lock = acquire_lock_1(force)
        return lock
    except LockFile.TimeOutError:
        status = qrunner_state()
        if status == 1:
            # host matches and proc exists
            print(C_("""\
The master qrunner lock could not be acquired because it appears as if another
master qrunner is already running.
"""), file=sys.stderr)
        elif status == 0:
            # host matches but no proc
            print(C_("""\
The master qrunner lock could not be acquired.  It appears as though there is
a stale master qrunner lock.  Try re-running mailmanctl with the -s flag.
"""), file=sys.stderr)
        else:
            # host doesn't even match
            print(C_("""\
The master qrunner lock could not be acquired, because it appears as if some
process on some other host may have acquired it.  We can't test for stale
locks across host boundaries, so you'll have to do this manually.  Or, if you
know the lock is stale, re-run mailmanctl with the -s flag.

Lock file: %(LOCKFILE)s
Lock host: %(status)s

Exiting."""), file=sys.stderr)


def start_runner(qrname, slice, count):
    pid = os.fork()
    if pid:
        # parent
        return pid
    # child
    #
    # Craft the command line arguments for the exec() call.
    rswitch = '--runner=%s:%d:%d' % (qrname, slice, count)
    exe = os.path.join(mm_cfg.BIN_DIR, 'qrunner')
    # mm_cfg.PYTHON, which is the absolute path to the Python interpreter,
    # must be given as argv[0] due to Python's library search algorithm.
    os.execl(mm_cfg.PYTHON, mm_cfg.PYTHON, exe, rswitch, '-s')
    # Should never get here
    raise RuntimeError('os.execl() failed')


def start_all_runners():
    kids = {}
    for qrname, count in mm_cfg.QRUNNERS:
        for slice in range(count):
            try:
                # queue runner name, slice, numslices, restart count
                info = (qrname, slice, count, 0)
                pid = start_runner(qrname, slice, count)
                kids[pid] = info
            except Exception as e:
                # Log the failure but continue with other runners
                syslog('error', 'Failed to start %s runner (slice %d): %s', 
                       qrname, slice, str(e))
                continue
    return kids


def check_for_site_list():
    sitelistname = mm_cfg.MAILMAN_SITE_LIST
    try:
        sitelist = MailList(sitelistname, lock=0)
    except Errors.MMUnknownListError:
        print(C_('Site list is missing: %(sitelistname)s'), file=sys.stderr)
        syslog('error', 'Site list is missing: %s', mm_cfg.MAILMAN_SITE_LIST)
        sys.exit(1)


def check_privs():
    # If we're running as root (uid == 0), coerce the uid and gid to that
    # which Mailman was configured for, and refuse to run if we didn't coerce
    # the uid/gid.
    gid = grp.getgrnam(mm_cfg.MAILMAN_GROUP)[2]
    uid = pwd.getpwnam(mm_cfg.MAILMAN_USER)[2]
    myuid = os.geteuid()
    if myuid == 0:
        # Set the process's supplimental groups.
        groups = [x[2] for x in grp.getgrall() if mm_cfg.MAILMAN_USER in x[3]]
        groups.append(gid)
        try:
            os.setgroups(groups)
        except AttributeError:
            # Python 2.1 doesn't have setgroups
            syslog('error', 'Warning: unable to setgroups(%s)' % groups)
        os.setgid(gid)
        os.setuid(uid)
    elif myuid != uid:
        name = mm_cfg.MAILMAN_USER
        usage(1, C_(
            'Run this program as root or as the %(name)s user, or use -u.'))


def check_status():
    """Check if all qrunners are running as expected."""
    # First check if the master process is running
    try:
        with open(mm_cfg.PIDFILE, 'r') as fp:
            content = fp.read().strip().split()
            if len(content) >= 2:
                pid = int(content[0])
                hostname = content[1]
                if hostname != socket.gethostname():
                    print(C_('PID file hostname mismatch: expected %(expected)s, got %(got)s') % 
                          {'expected': socket.gethostname(), 'got': hostname}, file=sys.stderr)
                    return False
            else:
                raise ValueError('Invalid PID file format')
        try:
            os.kill(pid, 0)  # Check if process exists
            print(C_('Master qrunner process is running (pid: %(pid)d)') % {'pid': pid})
        except OSError:
            print(C_('Master qrunner process is not running (stale pid file)'))
            return False
    except (IOError, ValueError) as e:
        print(C_('Master qrunner process is not running (no pid file)'))
        print(e, file=sys.stderr)
        return False

    # Check if the lock file exists and is valid
    try:
        hostname, pid, tempfile = get_lock_data()
        if hostname != socket.gethostname():
            print(C_('Lock file is held by another host: %(hostname)s') % {'hostname': hostname})
            return False
        try:
            os.kill(pid, 0)
            print(C_('Lock file is valid (pid: %(pid)d)') % {'pid': pid})
        except OSError:
            print(C_('Lock file is stale (process %(pid)d not running)') % {'pid': pid})
            return False
    except (IOError, ValueError):
        print(C_('No lock file found'))
        return False

    # Check if all expected qrunners are running
    expected_runners = dict(mm_cfg.QRUNNERS)
    running_runners = {}
    
    # Get all running qrunner processes
    for line in os.popen('ps aux | grep qrunner | grep -v grep').readlines():
        parts = line.split()
        if len(parts) >= 12:  # Ensure we have enough parts
            cmd = parts[10]  # The command is typically at index 10
            if '--runner=' in cmd:
                runner_name = cmd.split('--runner=')[1].split(':')[0]
                running_runners[runner_name] = running_runners.get(runner_name, 0) + 1

    # Compare expected vs running
    all_running = True
    for runner, count in expected_runners.items():
        actual = running_runners.get(runner, 0)
        if actual != count:
            print(C_('%(runner)s: expected %(count)d instances, found %(actual)d') % 
                  {'runner': runner, 'count': count, 'actual': actual})
            all_running = False
        else:
            print(C_('%(runner)s: %(count)d instances running') % 
                  {'runner': runner, 'count': count})

    return all_running


def check_global_circuit_breaker():
    """Check if we've exceeded the global restart limit.
    
    Returns:
        bool: True if we should stop all runners, False otherwise
    """
    # Circuit breaker disabled - always return False
    return False


def stop_all_processes(kids, lock=None):
    """Stop all child processes and clean up, similar to mailmanctl stop.
    
    Args:
        kids: Dictionary of child processes
        lock: Optional lock to release
    """
    # First send SIGTERM to all children
    for pid in list(kids.keys()):
        try:
            os.kill(pid, signal.SIGTERM)
        except OSError as e:
            if e.errno != errno.ESRCH:
                raise
    
    # Wait for all children to exit
    while kids:
        try:
            pid, status = os.wait()
            if pid in kids:
                del kids[pid]
        except OSError as e:
            if e.errno == errno.ECHILD:
                break
            elif e.errno != errno.EINTR:
                raise
            continue
    
    # Clean up PID file
    try:
        os.unlink(mm_cfg.PIDFILE)
        syslog('qrunner', 'Removed PID file: %s', mm_cfg.PIDFILE)
    except OSError as e:
        if e.errno != errno.ENOENT:
            syslog('error', 'Failed to remove PID file %s: %s', mm_cfg.PIDFILE, str(e))
    
    # Release lock if provided
    if lock:
        try:
            lock.unlock(unconditionally=1)
        except Exception as e:
            syslog('error', 'Failed to release lock: %s', str(e))


def main():
    try:
        args = parse_args()
    except SystemExit:
        usage(1)

    # Check that we're running as the right user
    if not args.run_as_user:
        try:
            mailman_uid = pwd.getpwnam(mm_cfg.MAILMAN_USER).pw_uid
            mailman_gid = grp.getgrnam(mm_cfg.MAILMAN_GROUP).gr_gid
        except (KeyError, AttributeError):
            print(C_('Cannot determine mailman user/group'), file=sys.stderr)
            sys.exit(1)

        if os.getuid() == 0:
            # We're root, so switch to the mailman user/group
            os.setgid(mailman_gid)
            os.setuid(mailman_uid)
        elif os.getuid() != mailman_uid or os.getgid() != mailman_gid:
            print(C_('Must be run as the mailman user'), file=sys.stderr)
            sys.exit(1)

    # Handle the command
    if args.command == 'status':
        if check_status():
            sys.exit(0)
        else:
            sys.exit(1)
    elif args.command == 'start':
        # Check if we're already running
        if os.path.exists(mm_cfg.PIDFILE):
            try:
                with open(mm_cfg.PIDFILE) as fp:
                    pid = int(fp.read().strip())
                if check_pid(pid):
                    print(C_('Mailman qrunner is already running (pid: %(pid)d)'), file=sys.stderr)
                    sys.exit(1)
            except (ValueError, IOError):
                pass

        # Try to acquire the lock
        try:
            lock = acquire_lock(args.stale_lock_cleanup)
        except LockFile.TimeOutError:
            sys.exit(1)

        # Start all runners
        kids = start_all_runners()
        if not kids:
            print(C_('No runners started'), file=sys.stderr)
            lock.unlock(unconditionally=1)
            sys.exit(1)

        # Write our PID to the PID file
        try:
            with open(mm_cfg.PIDFILE, 'w') as fp:
                fp.write(str(os.getpid()))
        except IOError as e:
            print(C_('Failed to write PID file: %(error)s'), file=sys.stderr)
            lock.unlock(unconditionally=1)
            sys.exit(1)

        # Now we're ready to simply do our wait/restart loop
        try:
            while True:
                try:
                    pid, status = os.wait()
                except OSError as e:
                    # No children? We're done
                    if e.errno == errno.ECHILD:
                        break
                    # If the system call got interrupted, just restart it.
                    elif e.errno != errno.EINTR:
                        raise
                    continue

                killsig = exitstatus = None
                if os.WIFSIGNALED(status):
                    killsig = os.WTERMSIG(status)
                if os.WIFEXITED(status):
                    exitstatus = os.WEXITSTATUS(status)

                restarting = ''
                if not args.no_restart:
                    # Only restart if the runner exited with SIGINT (normal exit)
                    # and not SIGTERM (error or forced stop)
                    if exitstatus == signal.SIGINT:
                        restarting = '[restarting]'

                qrname, slice, count, restarts = kids[pid]
                del kids[pid]
                
                # Only log abnormal exits
                if killsig == signal.SIGTERM or \
                   (exitstatus is not None and exitstatus != signal.SIGINT):
                    syslog('qrunner', """\
Master qrunner detected abnormal subprocess exit
(pid: %d, sig: %s, sts: %s, class: %s, slice: %d/%d) %s""",
                       pid, killsig, exitstatus, qrname,
                       slice+1, count, restarting)

                if restarting and check_global_circuit_breaker():
                    syslog('error', 'Global circuit breaker triggered - stopping all runners')
                    # Stop all processes and clean up
                    stop_all_processes(kids, lock)
                    # Exit the main loop
                    break
                
                if exitstatus != signal.SIGINT:
                    restarts += 1
                if restarts > MAX_RESTARTS:
                    syslog('qrunner', """\
Qrunner %s reached maximum restart limit of %d, not restarting.""",
                           qrname, MAX_RESTARTS)
                    restarting = ''

                # Now perhaps restart the process
                if restarting:
                    newpid = start_runner(qrname, slice, count)
                    kids[newpid] = (qrname, slice, count, restarts)

        finally:
            # all of our children are exited cleanly
            for pid in list(kids.keys()):
                try:
                    os.kill(pid, signal.SIGTERM)
                except OSError as e:
                    if e.errno == errno.ESRCH:
                        syslog('qrunner', 'ESRCH on pid: %d', pid)
                        del kids[pid]

            # Wait for all the children to go away
            while True:
                try:
                    pid, status = os.wait()
                except OSError as e:
                    if e.errno == errno.ECHILD:
                        break
                    elif e.errno != errno.EINTR:
                        raise
                    continue

            # Finally, give up the lock
            lock.unlock(unconditionally=1)
            os._exit(0)
    elif args.command == 'stop':
        kill_watcher(signal.SIGTERM)
        try:
            os.unlink(mm_cfg.PIDFILE)
            syslog('qrunner', 'Removed PID file: %s', mm_cfg.PIDFILE)
        except OSError as e:
            if e.errno != errno.ENOENT:
                syslog('error', 'Failed to remove PID file %s: %s', mm_cfg.PIDFILE, str(e))
    elif args.command == 'restart':
        kill_watcher(signal.SIGINT)
        start_all_runners()
    elif args.command == 'reopen':
        kill_watcher(signal.SIGHUP)
    else:
        usage(1, C_('Unknown command: %(command)s'))


if __name__ == '__main__':
    main()
