#! @PYTHON@

# Copyright (C) 2001-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

"""Primary start-up and shutdown script for Mailman's qrunner daemon.

This script starts, stops, and restarts the main Mailman queue runners, making
sure that the various long-running qrunners are still alive and kicking.  It
does this by forking and exec'ing the qrunners and waiting on their pids.
When it detects a subprocess has exited, it may restart it.

The qrunners respond to SIGINT, SIGTERM, and SIGHUP.  SIGINT and SIGTERM both
cause the qrunners to exit cleanly, but the master will only restart qrunners
that have exited due to a SIGINT.  SIGHUP causes the master and the qrunners
to close their log files, and reopen then upon the next printed message.

The master also responds to SIGINT, SIGTERM, and SIGHUP, which it simply
passes on to the qrunners (note that the master will close and reopen its own
log files on receipt of a SIGHUP).  The master also leaves its own process id
in the file data/master-qrunner.pid but you normally don't need to use this
pid directly.  The `start', `stop', `restart', and `reopen' commands handle
everything for you.

Usage: %(PROGRAM)s [options] [ start | stop | restart | reopen ]

Options:

    -n/--no-restart
        Don't restart the qrunners when they exit because of an error or a
        SIGINT.  They are never restarted if they exit in response to a
        SIGTERM.  Use this only for debugging.  Only useful if the `start'
        command is given.

    -u/--run-as-user
        Normally, this script will refuse to run if the user id and group id
        are not set to the `mailman' user and group (as defined when you
        configured Mailman).  If run as root, this script will change to this
        user and group before the check is made.

        This can be inconvenient for testing and debugging purposes, so the -u
        flag means that the step that sets and checks the uid/gid is skipped,
        and the program is run as the current user and group.  This flag is
        not recommended for normal production environments.

        Note though, that if you run with -u and are not in the mailman group,
        you may have permission problems, such as begin unable to delete a
        list's archives through the web.  Tough luck!

    -s/--stale-lock-cleanup
        If mailmanctl finds an existing master lock, it will normally exit
        with an error message.  With this option, mailmanctl will perform an
        extra level of checking.  If a process matching the host/pid described
        in the lock file is running, mailmanctl will still exit, but if no
        matching process is found, mailmanctl will remove the apparently stale
        lock and make another attempt to claim the master lock.

    -q/--quiet
        Don't print status messages.  Error messages are still printed to
        standard error.

    -h/--help
        Print this message and exit.

Commands:

    start   - Start the master daemon and all qrunners.  Prints a message and
              exits if the master daemon is already running.

    stop    - Stops the master daemon and all qrunners.  After stopping, no
              more messages will be processed.

    restart - Restarts the qrunners, but not the master process.  Use this
              whenever you upgrade or update Mailman so that the qrunners will
              use the newly installed code.

    reopen  - This will close all log files, causing them to be re-opened the
              next time a message is written to them
"""

import sys
import os
import time
import argparse
import signal
import errno
import pwd
import grp
import socket

import paths
from Mailman import mm_cfg
from Mailman import Utils
from Mailman import LockFile
from Mailman import Errors
from Mailman.MailList import MailList
from Mailman.i18n import C_
from Mailman.Logging.Syslog import syslog
from Mailman.Logging.Utils import LogStdErr

PROGRAM = sys.argv[0]
COMMASPACE = ', '
DOT = '.'

# Locking contantsa
LOCKFILE = os.path.join(mm_cfg.LOCK_DIR, mm_cfg.MASTER_LOCK_FILE)
# Since we wake up once per day and refresh the lock, the LOCK_LIFETIME
# needn't be (much) longer than SNOOZE.  We pad it 6 hours just to be safe.
LOCK_LIFETIME = mm_cfg.days(1) + mm_cfg.hours(6)
SNOOZE = mm_cfg.days(1)
MAX_RESTARTS = 10

LogStdErr('error', 'mailmanctl', manual_reprime=0)


def parse_args():
    parser = argparse.ArgumentParser(description='Primary start-up and shutdown script for Mailman\'s qrunner daemon.')
    parser.add_argument('command', choices=['start', 'stop', 'restart', 'reopen'],
                       help='Command to execute')
    parser.add_argument('-n', '--no-restart', action='store_true',
                       help='Don\'t restart the qrunners when they exit because of an error or a SIGINT')
    parser.add_argument('-u', '--run-as-user', action='store_true',
                       help='Run as current user instead of mailman user')
    parser.add_argument('-s', '--stale-lock-cleanup', action='store_true',
                       help='Clean up stale locks before starting')
    parser.add_argument('-q', '--quiet', action='store_true',
                       help='Don\'t print status messages')
    return parser.parse_args()


def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    # Ensure PROGRAM is a string, not bytes
    if isinstance(PROGRAM, bytes):
        PROGRAM = PROGRAM.decode('utf-8', 'replace')
    print(C_(__doc__), file=fd)
    if msg:
        print(msg, file=fd)
    sys.exit(code)


def kill_watcher(sig):
    try:
        fp = open(mm_cfg.PIDFILE)
        pidstr = fp.read()
        fp.close()
        pid = int(pidstr.strip())
    except (IOError, ValueError) as e:
        # For i18n convenience
        pidfile = mm_cfg.PIDFILE
        print(C_('PID unreadable in: %(pidfile)s'), file=sys.stderr)
        print(e, file=sys.stderr)
        print(C_('Is qrunner even running?'), file=sys.stderr)
        return
    try:
        os.kill(pid, sig)
    except OSError as e:
        if e.errno != errno.ESRCH: raise
        print(C_('No child with pid: %(pid)s'), file=sys.stderr)
        print(e, file=sys.stderr)
        print(C_('Stale pid file removed.'), file=sys.stderr)
        os.unlink(mm_cfg.PIDFILE)


def get_lock_data():
    # Return the hostname, pid, and tempfile
    fp = open(LOCKFILE)
    filename = os.path.split(fp.read().strip())[1]
    fp.close()
    parts = filename.split('.')
    hostname = DOT.join(parts[1:-1])
    pid = int(parts[-1])
    return hostname, int(pid), filename


def qrunner_state():
    # 1 if proc exists on host (but is it qrunner? ;)
    # 0 if host matches but no proc
    # hostname if hostname doesn't match
    hostname, pid, tempfile = get_lock_data()
    if hostname != socket.gethostname():
        return hostname
    # Find out if the process exists by calling kill with a signal 0.
    try:
        os.kill(pid, 0)
    except OSError as e:
        if e.errno != errno.ESRCH: raise
        return 0
    return 1


def acquire_lock_1(force):
    # Be sure we can acquire the master qrunner lock.  If not, it means some
    # other master qrunner daemon is already going.
    lock = LockFile.LockFile(LOCKFILE, LOCK_LIFETIME)
    try:
        lock.lock(0.1)
        return lock
    except LockFile.TimeOutError:
        # If we're not forcing or the lock can't be determined to be stale.
        if not force or qrunner_state():
            raise
        # Force removal of lock first
        lock._disown()
        hostname, pid, tempfile = get_lock_data()
        os.unlink(LOCKFILE)
        os.unlink(os.path.join(mm_cfg.LOCK_DIR, tempfile))
        return acquire_lock_1(force=0)


def acquire_lock(force):
    try:
        lock = acquire_lock_1(force)
        return lock
    except LockFile.TimeOutError:
        status = qrunner_state()
        if status == 1:
            # host matches and proc exists
            print(C_("""\
The master qrunner lock could not be acquired because it appears as if another
master qrunner is already running.
"""), file=sys.stderr)
        elif status == 0:
            # host matches but no proc
            print(C_("""\
The master qrunner lock could not be acquired.  It appears as though there is
a stale master qrunner lock.  Try re-running mailmanctl with the -s flag.
"""), file=sys.stderr)
        else:
            # host doesn't even match
            print(C_("""\
The master qrunner lock could not be acquired, because it appears as if some
process on some other host may have acquired it.  We can't test for stale
locks across host boundaries, so you'll have to do this manually.  Or, if you
know the lock is stale, re-run mailmanctl with the -s flag.

Lock file: %(LOCKFILE)s
Lock host: %(status)s

Exiting."""), file=sys.stderr)


def start_runner(qrname, slice, count):
    pid = os.fork()
    if pid:
        # parent
        return pid
    # child
    #
    # Craft the command line arguments for the exec() call.
    rswitch = '--runner=%s:%d:%d' % (qrname, slice, count)
    exe = os.path.join(mm_cfg.BIN_DIR, 'qrunner')
    # mm_cfg.PYTHON, which is the absolute path to the Python interpreter,
    # must be given as argv[0] due to Python's library search algorithm.
    os.execl(mm_cfg.PYTHON, mm_cfg.PYTHON, exe, rswitch, '-s')
    # Should never get here
    raise RuntimeError('os.execl() failed')


def start_all_runners():
    kids = {}
    for qrname, count in mm_cfg.QRUNNERS:
        for slice in range(count):
            # queue runner name, slice, numslices, restart count
            info = (qrname, slice, count, 0)
            pid = start_runner(qrname, slice, count)
            kids[pid] = info
    return kids


def check_for_site_list():
    sitelistname = mm_cfg.MAILMAN_SITE_LIST
    try:
        sitelist = MailList(sitelistname, lock=0)
    except Errors.MMUnknownListError:
        print(C_('Site list is missing: %(sitelistname)s'), file=sys.stderr)
        syslog('error', 'Site list is missing: %s', mm_cfg.MAILMAN_SITE_LIST)
        sys.exit(1)


def check_privs():
    # If we're running as root (uid == 0), coerce the uid and gid to that
    # which Mailman was configured for, and refuse to run if we didn't coerce
    # the uid/gid.
    gid = grp.getgrnam(mm_cfg.MAILMAN_GROUP)[2]
    uid = pwd.getpwnam(mm_cfg.MAILMAN_USER)[2]
    myuid = os.geteuid()
    if myuid == 0:
        # Set the process's supplimental groups.
        groups = [x[2] for x in grp.getgrall() if mm_cfg.MAILMAN_USER in x[3]]
        groups.append(gid)
        try:
            os.setgroups(groups)
        except AttributeError:
            # Python 2.1 doesn't have setgroups
            syslog('error', 'Warning: unable to setgroups(%s)' % groups)
        os.setgid(gid)
        os.setuid(uid)
    elif myuid != uid:
        name = mm_cfg.MAILMAN_USER
        usage(1, C_(
            'Run this program as root or as the %(name)s user, or use -u.'))


def main():
    try:
        args = parse_args()
    except SystemExit:
        usage(1)

    # Check that we're running as the right user
    if not args.run_as_user:
        try:
            mailman_uid = pwd.getpwnam(mm_cfg.MAILMAN_USER).pw_uid
            mailman_gid = grp.getgrnam(mm_cfg.MAILMAN_GROUP).gr_gid
        except (KeyError, AttributeError):
            print(C_('Cannot determine mailman user/group'), file=sys.stderr)
            sys.exit(1)

        if os.getuid() == 0:
            # We're root, so switch to the mailman user/group
            os.setgid(mailman_gid)
            os.setuid(mailman_uid)
        elif os.getuid() != mailman_uid or os.getgid() != mailman_gid:
            print(C_('Must be run as the mailman user'), file=sys.stderr)
            sys.exit(1)

    # Handle the command
    if args.command == 'start':
        start_qrunners(args)
    elif args.command == 'stop':
        stop_qrunners()
    elif args.command == 'restart':
        restart_qrunners()
    elif args.command == 'reopen':
        reopen_logs()
    else:
        usage(1, C_('Unknown command: %(command)s'))


if __name__ == '__main__':
    main()
