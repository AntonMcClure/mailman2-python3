#! @PYTHON@
#
# Copyright (C) 2003-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

"""Discard held messages.

Usage:
    discard [options] file ...

Options:
    --help / -h
        Print this help message and exit.

    --quiet / -q
        Don't print status messages.
"""

# TODO: add command line arguments for specifying other actions than DISCARD,
# and also for specifying other __handlepost() arguments, i.e. comment,
# preserve, forward, addr

import os
import re
import sys
import argparse

import paths
from Mailman import mm_cfg
from Mailman.MailList import MailList
from Mailman.i18n import C_

cre = re.compile(r'heldmsg-(?P<listname>.*)-(?P<id>[0-9]+)\.(pck|txt)$')


def parse_args():
    parser = argparse.ArgumentParser(description='Discard held messages.')
    parser.add_argument('-q', '--quiet', action='store_true',
                       help='Don\'t print status messages')
    parser.add_argument('files', nargs='*',
                       help='Files containing held messages to discard')
    return parser.parse_args()


def main():
    args = parse_args()

    files = args.files
    if not files:
        print(C_('Nothing to do.'))

    # Mapping from listnames to sequence of request ids
    discards = {}

    # Cruise through all the named files, collating by mailing list.  We'll
    # lock the list once, process all holds for that list and move on.
    for f in files:
        basename = os.path.basename(f)
        mo = cre.match(basename)
        if not mo:
            print(C_('Ignoring non-held message: %(f)s'), file=sys.stderr)
            continue
        listname, id = mo.group('listname', 'id')
        try:
            id = int(id)
        except (ValueError, TypeError):
            print(C_('Ignoring held msg w/bad id: %(f)s'), file=sys.stderr)
            continue
        discards.setdefault(listname, []).append(id)

    # Now do the discards
    for listname, ids in discards.items():
        mlist = MailList(listname)
        try:
            for id in ids:
                # No comment, no preserve, no forward, no forwarding address
                mlist.HandleRequest(id, mm_cfg.DISCARD, '', False, False, '')
                if not args.quiet:
                    print(C_(
                          'Discarded held msg #%(id)s for list %(listname)s'))
            mlist.Save()
        finally:
            mlist.Unlock()


if __name__ == '__main__':
    main()
