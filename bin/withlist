#! @PYTHON@
#
# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

"""General framework for interacting with a mailing list object.

There are two ways to use this script: interactively or programmatically.
Using it interactively allows you to play with, examine and modify a MailList
object from Python's interactive interpreter.  When running interactively, a
MailList object called `m' will be available in the global namespace.  It also
loads the class MailList into the global namespace.

Programmatically, you can write a function to operate on a MailList object,
and this script will take care of the housekeeping (see below for examples).
In that case, the general usage syntax is:

%% bin/withlist [options] listname [args ...]

Options:

    -l / --lock
        Lock the list when opening.  Normally the list is opened unlocked
        (e.g. for read-only operations).  You can always lock the file after
        the fact by typing `m.Lock()'

        Note that if you use this option, you should explicitly call m.Save()
        before exiting, since the interpreter's clean up procedure will not
        automatically save changes to the MailList object (but it will unlock
        the list).

    -i / --interactive
        Leaves you at an interactive prompt after all other processing is
        complete.  This is the default unless the -r option is given.

    --run [module.]callable
    -r [module.]callable
        This can be used to run a script with the opened MailList object.
        This works by attempting to import `module' (which must be in the
        directory containing withlist, or already be accessible on your
        sys.path), and then calling `callable' from the module.  callable can
        be a class or function; it is called with the MailList object as the
        first argument.  If additional args are given on the command line,
        they are passed as subsequent positional args to the callable.

        Note that `module.' is optional; if it is omitted then a module with
        the name `callable' will be imported.

        The global variable `r' will be set to the results of this call.

    --all / -a
        This option only works with the -r option.  Use this if you want to
        execute the script on all mailing lists.  When you use -a you should
        not include a listname argument on the command line.  The variable `r'
        will be a list of all the results.

    --quiet / -q
        Suppress all status messages.

    --help / -h
        Print this message and exit


Here's an example of how to use the -r option.  Say you have a file in the
Mailman installation directory called `listaddr.py', with the following
two functions:

def listaddr(mlist):
    print(mlist.GetListEmail())

def requestaddr(mlist):
    print(mlist.GetRequestEmail())

Now, from the command line you can print the list's posting address by running
the following from the command line:

%% bin/withlist -r listaddr mylist
Loading list: mylist (unlocked)
Importing listaddr ...
Running listaddr.listaddr() ...
mylist@myhost.com

And you can print the list's request address by running:

%% bin/withlist -r listaddr.requestaddr mylist
Loading list: mylist (unlocked)
Importing listaddr ...
Running listaddr.requestaddr() ...
mylist-request@myhost.com

As another example, say you wanted to change the password for a particular
user on a particular list.  You could put the following function in a file
called `changepw.py':

from Mailman.Errors import NotAMemberError

def changepw(mlist, addr, newpasswd):
    try:
        mlist.setMemberPassword(addr, newpasswd)
        mlist.Save()
    except NotAMemberError:
        print('No address matched:', addr)

and run this from the command line:
 %% bin/withlist -l -r changepw mylist somebody@somewhere.org foobar
"""

import os
import sys
import code
import argparse

import paths
from Mailman import Errors
from Mailman import MailList
from Mailman import Utils
from Mailman.i18n import C_

# `m' will be the MailList object and `r' will be the results of the callable
m = None
r = None
VERBOSE = True
LOCK = False


# Put the bin directory on sys.path -- last
sys.path.append(os.path.dirname(sys.argv[0]))


def parse_args():
    parser = argparse.ArgumentParser(description='General framework for interacting with a mailing list object.')
    parser.add_argument('-l', '--lock', action='store_true',
                       help='Lock the list when opening')
    parser.add_argument('-i', '--interactive', action='store_true',
                       help='Leave at interactive prompt after processing')
    parser.add_argument('-r', '--run',
                       help='Run a script with the opened MailList object')
    parser.add_argument('-a', '--all', action='store_true',
                       help='Execute the script on all mailing lists')
    parser.add_argument('-q', '--quiet', action='store_true',
                       help='Suppress all status messages')
    parser.add_argument('listname', nargs='?',
                       help='Name of the mailing list')
    parser.add_argument('args', nargs='*',
                       help='Additional arguments to pass to the script')
    return parser.parse_args()


def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    print(C_(__doc__), file=fd)
    if msg:
        print(msg, file=sys.stderr)
    sys.exit(code)


def atexit():
    """Unlock a locked list, but do not implicitly Save() it.

    This does not get run if the interpreter exits because of a signal, or if
    os._exit() is called.  It will get called if an exception occurs though.
    """
    global m
    if not m:
        return
    if m.Locked():
        if VERBOSE:
            listname = m.internal_name()
            print(C_(
                'Unlocking (but not saving) list: %(listname)s'), file=sys.stderr)
        m.Unlock()
    if VERBOSE:
        print(C_('Finalizing'), file=sys.stderr)
    del m


def do_list(listname, args, func):
    global m
    # first try to open mailing list
    if VERBOSE:
        print(C_('Loading list %(listname)s'), file=sys.stderr)
        if LOCK:
            print(C_('(locked)'), file=sys.stderr)
        else:
            print(C_('(unlocked)'), file=sys.stderr)

    try:
        m = MailList.MailList(listname, lock=LOCK)
    except Errors.MMUnknownListError:
        print(C_('Unknown list: %(listname)s'), file=sys.stderr)
        m = None

    # try to import the module and run the callable
    if func:
        return func(m, *args)
    return None


def main():
    global VERBOSE, LOCK
    try:
        args = parse_args()
    except SystemExit:
        usage(1)

    VERBOSE = not args.quiet
    LOCK = args.lock

    # Import the callable if one was specified
    func = None
    if args.run:
        if VERBOSE:
            print(C_('Importing %(module)s ...'), file=sys.stderr)
        try:
            if '.' in args.run:
                module, callable = args.run.rsplit('.', 1)
                mod = __import__(module, globals(), locals(), [callable])
                func = getattr(mod, callable)
            else:
                mod = __import__(args.run, globals(), locals(), [])
                func = getattr(mod, args.run)
        except (ImportError, AttributeError) as e:
            print(C_('Error importing %(module)s: %(error)s'),
                  file=sys.stderr)
            sys.exit(1)

    # Handle the --all option
    if args.all:
        if args.listname:
            usage(1, C_('Cannot specify listname with --all'))
        results = []
        for listname in Utils.list_names():
            if VERBOSE:
                print(C_('Processing list: %(listname)s'), file=sys.stderr)
            result = do_list(listname, args.args, func)
            if result is not None:
                results.append(result)
        r = results
    else:
        if not args.listname:
            usage(1, C_('No listname specified'))
        r = do_list(args.listname, args.args, func)

    # If we're not running a script, or if --interactive was given, start an
    # interactive interpreter
    if not args.run or args.interactive:
        # Make sure the list is unlocked before starting the interpreter
        if m and m.Locked():
            m.Unlock()
        # Start the interpreter
        code.interact(local=locals())
    else:
        # We're done
        sys.exit(0)


sys.exitfunc = atexit
main()
