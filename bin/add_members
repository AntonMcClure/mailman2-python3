#! @PYTHON@
#
# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Make sure that the list of email addresses doesn't contain any comments,
# like majordomo may throw in.  For now, you just have to remove them manually.

"""Add members to a list from the command line.

Usage:
    add_members [options] listname

Options:

    --regular-members-file=file
    -r file
        A file containing addresses of the members to be added, one
        address per line.  This list of people become non-digest
        members.  If file is `-', read addresses from stdin.

    --digest-members-file=file
    -d file
        Similar to above, but these people become digest members.

    --invite
    -i
        Specify this if you only want to invite the users to a list
        instead of subscribing them.

    --invite-msg-file=file
    -m file
        This will prepend the message in the file to the invite email that
        gets generated when --invite is set.

    --welcome-msg=<y|n>
    -w <y|n>
        Set whether or not to send the list members a welcome message,
        overriding whatever the list's `send_welcome_msg' setting is.  This
        is ignored and the list's setting at the time of acceptance is used
        if --invite is set.

    --admin-notify=<y|n>
    -a <y|n>
        Set whether or not to send the list administrators a notification on
        the success/failure of these subscriptions, overriding whatever the
        list's `admin_notify_mchanges' setting is.  This is ignored and the
        list's setting at the time of acceptance is used if --invite is set.

    --nomail
    -n
        Set the newly added members mail delivery to disabled by admin.  This
        is ignored if --invite is set.

    --help
    -h
        Print this help message and exit.

    listname
        The name of the Mailman list you are adding members to.  It must
        already exist.

You must supply at least one of -r and -d options.  At most one of the
files can be `-'.
"""

import sys
import os
import argparse
from io import StringIO

import paths
# Import this /after/ paths so that the sys.path is properly hacked
from email.utils import parseaddr

from Mailman import i18n
from Mailman import Utils
from Mailman import mm_cfg
from Mailman import Errors
from Mailman.Message import Message
from Mailman import MailList
from Mailman import MemberAdaptor
from Mailman.UserDesc import UserDesc

_ = i18n._
C_ = i18n.C_


def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    print(_(__doc__), file=fd)
    if msg:
        print(msg, file=fd)
    sys.exit(code)


def readfile(filename):
    if filename == '-':
        fp = sys.stdin
        closep = 0
    else:
        fp = open(filename)
        closep = 1
    # strip all the lines of whitespace and discard blank lines
    lines = filter(None, [line.strip() for line in fp.readlines()])
    if closep:
        fp.close()
    return lines


def readmsgfile(filename):
    lines = open(filename).read()
    return lines


class Tee:
    def __init__(self, outfp):
        self.__outfp = outfp

    def write(self, msg):
        sys.stdout.write(i18n.tolocale(msg))
        self.__outfp.write(msg)


def addall(mlist, members, digest, ack, outfp, nomail, invite, invite_msg):
    tee = Tee(outfp)
    for member in members:
        userdesc = UserDesc()
        userdesc.fullname, userdesc.address = parseaddr(member)
        userdesc.digest = digest

        try:
            if invite:
                # These are needed for an invitation.
                userdesc.password = Utils.MakeRandomPassword()
                userdesc.language = mlist.preferred_language
                # Don't forget the special invite hack.
                userdesc.invitation = mlist.internal_name()
                # InviteNewMember doesn't throw Errors.MMAlreadyAMember.
                if mlist.isMember(userdesc.address):
                    print(_('Already a member: %(member)s'), file=tee)
                    continue
                mlist.InviteNewMember(userdesc, invite_msg)
            else:
                mlist.ApprovedAddMember(userdesc,
                                        ack=ack,
                                        admin_notif=False,
                                        whence='bin/add_members',
                                       )
        except Errors.MMAlreadyAMember:
            print(_('Already a member: %(member)s'), file=tee)
        except Errors.MembershipIsBanned as pattern:
            print(('%s:' %
                           member), _('Banned address (matched %(pattern)s)'), file=tee)
        except Errors.MMBadEmailError:
            if userdesc.address == '':
                print(_('Bad/Invalid email address: blank line'), file=tee)
            else:
                print(_('Bad/Invalid email address: %(member)s'), file=tee)
        except Errors.MMHostileAddress:
            print(_('Hostile address (illegal characters): %(member)s'), file=tee)
        else:
            if invite:
                print(_('Invited: %(member)s'), file=tee)
            else:
                print(_('Subscribed: %(member)s'), file=tee)
                if nomail:
                    mlist.setDeliveryStatus(
                        userdesc.address.lower(), MemberAdaptor.BYADMIN)


def main():
    parser = argparse.ArgumentParser(description='Add members to a mailing list.')
    parser.add_argument('listname', help='Name of the mailing list')
    parser.add_argument('-a', '--admin-notify', action='store_true',
                       help='Send admin notification')
    parser.add_argument('-w', '--welcome-msg', action='store_true',
                       help='Send welcome message')
    parser.add_argument('-i', '--invite', action='store_true',
                       help='Send invitation instead of directly subscribing')
    parser.add_argument('-f', '--file', help='File containing member addresses')
    parser.add_argument('-d', '--digest', action='store_true',
                       help='Subscribe members to digest delivery')
    parser.add_argument('-m', '--moderate', action='store_true',
                       help='Moderate new members')
    parser.add_argument('-n', '--no-welcome', action='store_true',
                       help='Do not send welcome message')
    parser.add_argument('-r', '--regular', action='store_true',
                       help='Subscribe members to regular delivery')
    parser.add_argument('-t', '--text', help='Text to include in welcome message')
    parser.add_argument('-u', '--userack', action='store_true',
                       help='Require user acknowledgment')
    parser.add_argument('-l', '--language', help='Preferred language for new members')

    args = parser.parse_args()

    # Get the list name
    if not args.listname:
        usage(1, _('You must specify a list name'))
    listname = args.listname

    # Get the list object
    try:
        mlist = MailList.MailList(listname, lock=1)
    except Errors.MMUnknownListError:
        usage(1, _('No such list: %(listname)s'))

    # Get the members to add
    members = []
    if args.regular_members_file:
        if args.regular_members_file == '-':
            members = sys.stdin.read().splitlines()
        else:
            try:
                with open(args.regular_members_file) as fp:
                    members = fp.read().splitlines()
            except IOError:
                usage(1, _('Cannot open file: %(file)s') %
                      {'file': args.regular_members_file})
    elif args.digest_members_file:
        if args.digest_members_file == '-':
            members = sys.stdin.read().splitlines()
        else:
            try:
                with open(args.digest_members_file) as fp:
                    members = fp.read().splitlines()
            except IOError:
                usage(1, _('Cannot open file: %(file)s') %
                      {'file': args.digest_members_file})
    else:
        usage(1, _('You must specify at least one of -r or -d'))

    # Process each member
    for member in members:
        member = member.strip()
        if not member or member.startswith('#'):
            continue
        # Convert email address to lowercase
        member = member.lower()
        try:
            if args.invite:
                mlist.InviteNewMember(member, args.invite_msg_file)
            else:
                mlist.AddMember(member, args.regular, args.digest,
                              args.moderate, args.text, args.userack,
                              args.admin_notify, args.welcome_msg,
                              args.language)
        except Errors.MMAlreadyAMember:
            print(_('%(member)s is already a member of %(listname)s'))
        except Errors.MMHostileAddress:
            print(_('%(member)s is a hostile address'))
        except Errors.MMInvalidEmailAddress:
            print(_('%(member)s is not a valid email address'))
        except Errors.MMBadEmailError:
            print(_('%(member)s is not a valid email address'))
        except Errors.MMListError as e:
            print(_('%(member)s: %(error)s'))

    mlist.Save()
    mlist.Unlock()


if __name__ == '__main__':
    main()
