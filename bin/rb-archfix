#! @PYTHON@
#
# Copyright (C) 2003-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Author: Richard Barrett

"""Reduce disk space usage for Pipermail archives.

Usage: %(PROGRAM)s [options] file ...

Where options are:
    -h / --help
        Print this help message and exit.

Only use this to 'fix' archive -article database files that have been written
with Mailman 2.1.3 or earlier and have html_body attributes in them.  These
attributes can cause huge amounts of memory bloat and impact performance for
high activity lists, particularly those where large text postings are made to
them.

Example:

%% ls -1 archives/private/*/database/*-article | xargs %(PROGRAM)s

You should run `bin/check_perms -f' after running this script.

You will probably want to delete the -article.bak files created by this script
when you are satisfied with the results.

This script is provided for convenience purposes only.  It isn't supported.
"""
from __future__ import print_function

import os
import sys
import argparse
import marshal
import pickle

# Required to get the right classes for unpickling
import paths
from Mailman.i18n import C_

PROGRAM = sys.argv[0]


def parse_args():
    parser = argparse.ArgumentParser(description='Reduce disk space usage for Pipermail archives.')
    parser.add_argument('files', nargs='+',
                       help='Files to process')
    return parser.parse_args()


def load_article(pckstr):
    """Load an article from a pickle string with Python 2/3 compatibility."""
    try:
        return pickle.loads(pckstr, fix_imports=True, encoding='latin1')
    except Exception as e:
        print('Error loading article: %s' % e)
        return None


def save_article(article):
    """Save an article to a pickle string with Python 2/3 compatibility."""
    try:
        return pickle.dumps(article, protocol=4, fix_imports=True)
    except Exception as e:
        print('Error saving article: %s' % e)
        return None


def main():
    args = parse_args()

    for filename in args.files:
        print(('processing:', filename))
        fp = open(filename, 'rb')
        d = marshal.load(fp)
        fp.close()
        newd = {}
        for key, pckstr in d.items():
            article = load_article(pckstr)
            if article:
                try:
                    del article.html_body
                except AttributeError:
                    pass
                newd[key] = save_article(article)
        fp = open(filename + '.tmp', 'wb')
        marshal.dump(newd, fp)
        fp.close()
        os.rename(filename, filename + '.bak')
        os.rename(filename + '.tmp', filename)

    print('You should now run "bin/check_perms -f"')


if __name__ == '__main__':
    main()
