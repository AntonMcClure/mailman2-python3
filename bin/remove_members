#! @PYTHON@
#
# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

"""Remove members from a list.

Usage:
    remove_members [options] [listname] [addr1 ...]

Options:

    --file=file
    -f file
        Remove member addresses found in the given file.  If file is
        `-', read stdin.

    --all
    -a
        Remove all members of the mailing list.
        (mutually exclusive with --fromall)

    --fromall
        Removes the given addresses from all the lists on this system
        regardless of virtual domains if you have any.  This option cannot be
        used -a/--all.  Also, you should not specify a listname when using
        this option.

    --nouserack
    -n
        Don't send the user acknowledgements.  If not specified, the list
        default value is used.

    --noadminack
    -N
        Don't send the admin acknowledgements.  If not specified, the list
        default value is used.

    --help
    -h
        Print this help message and exit.

    listname is the name of the mailing list to use.

    addr1 ... are additional addresses to remove.
"""

import sys
import argparse

import paths
from Mailman import mm_cfg
from Mailman import Utils
from Mailman import MailList
from Mailman import Errors
from Mailman import i18n

_ = i18n._

def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    print(_(__doc__), file=fd)
    if msg:
        print(msg, file=fd)
    sys.exit(code)

def main():
    parser = argparse.ArgumentParser(description='Remove members from a mailing list.')
    parser.add_argument('listname', help='Name of the mailing list')
    parser.add_argument('-a', '--admin-notify', action='store_true',
                       help='Send admin notification')
    parser.add_argument('-f', '--file', help='File containing member addresses')
    parser.add_argument('-n', '--no-admin-notify', action='store_true',
                       help='Do not send admin notification')
    parser.add_argument('-N', '--no-userack', action='store_true',
                       help='Do not send user acknowledgment')
    parser.add_argument('-w', '--welcome-msg', action='store_true',
                       help='Send welcome message')

    args = parser.parse_args()

    try:
        mlist = MailList.MailList(args.listname, lock=1)
    except Errors.MMUnknownListError:
        usage(1, _('No such list "%(listname)s"'))

    if args.file:
        try:
            fp = open(args.file)
        except IOError:
            usage(1, _('Cannot open file: %(file)s'))
        addrs = []
        for line in fp:
            line = line.strip()
            if line and not line.startswith('#'):
                addrs.append(line)
        fp.close()
    else:
        addrs = sys.stdin.read().splitlines()

    if not addrs:
        usage(1, _('No addresses to remove'))

    # Process each address
    for addr in addrs:
        addr = addr.strip()
        if not addr or addr.startswith('#'):
            continue
        try:
            mlist.DeleteMember(addr, admin_notif=not args.no_admin_notify,
                             userack=not args.no_userack)
        except Errors.NotAMemberError:
            print(_('%(addr)s is not a member of %(listname)s'))
        except Errors.MMListError as e:
            print(_('%(addr)s: %(error)s'))

    mlist.Save()
    mlist.Unlock()

if __name__ == '__main__':
    main()
