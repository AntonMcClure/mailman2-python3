#! @PYTHON@
#
# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

"""Synchronize a mailing list's membership with a flat file.

This script is useful if you have a Mailman mailing list and a sendmail
:include: style list of addresses (also as is used in Majordomo).  For every
address in the file that does not appear in the mailing list, the address is
added.  For every address in the mailing list that does not appear in the
file, the address is removed.  Other options control what happens when an
address is added or removed.

Usage: %(PROGRAM)s [options] -f file listname

Where `options' are:

    --no-change
    -n
        Don't actually make the changes.  Instead, print out what would be
        done to the list.

    --welcome-msg[=<yes|no>]
    -w[=<yes|no>]
        Sets whether or not to send the newly added members a welcome
        message, overriding whatever the list's `send_welcome_msg' setting
        is.  With -w=yes or -w, the welcome message is sent.  With -w=no, no
        message is sent.

    --goodbye-msg[=<yes|no>]
    -g[=<yes|no>]
        Sets whether or not to send the goodbye message to removed members,
        overriding whatever the list's `send_goodbye_msg' setting is.  With
        -g=yes or -g, the goodbye message is sent.  With -g=no, no message is
        sent.

    --digest[=<yes|no>]
    -d[=<yes|no>]
        Selects whether to make newly added members receive messages in
        digests.  With -d=yes or -d, they become digest members.  With -d=no
        (or if no -d option given) they are added as regular members.

    --notifyadmin[=<yes|no>]
    -a[=<yes|no>]
        Specifies whether the admin should be notified for each subscription
        or unsubscription.  If you're adding a lot of addresses, you
        definitely want to turn this off!  With -a=yes or -a, the admin is
        notified.  With -a=no, the admin is not notified.  With no -a option,
        the default for the list is used.

    --file <filename | ->
    -f <filename | ->
        This option is required.  It specifies the flat file to synchronize
        against.  Email addresses must appear one per line.  If filename is
        `-' then stdin is used.

    --help
    -h
        Print this message.

    listname
        Required.  This specifies the list to synchronize.
"""

import sys
import paths
import email.utils
import argparse

from Mailman import MailList
from Mailman import Errors
from Mailman import Utils
from Mailman.UserDesc import UserDesc
from Mailman.i18n import C_



PROGRAM = sys.argv[0]

def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    # Ensure PROGRAM is a string, not bytes
    if isinstance(PROGRAM, bytes):
        PROGRAM = PROGRAM.decode('utf-8', 'replace')
    print(C_(__doc__), file=fd)
    if msg:
        print(msg, file=fd)
    sys.exit(code)



def parse_args():
    parser = argparse.ArgumentParser(description=C_('Synchronize a mailing list\'s membership with a flat file.'))
    
    parser.add_argument('-n', '--no-change',
                      action='store_true',
                      help=C_('Don\'t actually make the changes. Instead, print out what would be done to the list.'))
    
    parser.add_argument('-w', '--welcome-msg',
                      nargs='?',
                      const='yes',
                      choices=['yes', 'no'],
                      help=C_('Sets whether or not to send the newly added members a welcome message, overriding whatever the list\'s `send_welcome_msg` setting is.'))
    
    parser.add_argument('-g', '--goodbye-msg',
                      nargs='?',
                      const='yes',
                      choices=['yes', 'no'],
                      help=C_('Sets whether or not to send the goodbye message to removed members, overriding whatever the list\'s `send_goodbye_msg` setting is.'))
    
    parser.add_argument('-d', '--digest',
                      nargs='?',
                      const='yes',
                      choices=['yes', 'no'],
                      help=C_('Selects whether to make newly added members receive messages in digests.'))
    
    parser.add_argument('-a', '--notifyadmin',
                      nargs='?',
                      const='yes',
                      choices=['yes', 'no'],
                      help=C_('Specifies whether the admin should be notified for each subscription or unsubscription.'))
    
    parser.add_argument('-f', '--file',
                      required=True,
                      help=C_('The flat file to synchronize against. Email addresses must appear one per line. Use \'-\' for stdin.'))
    
    parser.add_argument('listname',
                      help=C_('The list to synchronize.'))
    
    args = parser.parse_args()
    
    # Convert yes/no options to boolean values
    if args.welcome_msg:
        args.welcome_msg = args.welcome_msg.lower() == 'yes'
    if args.goodbye_msg:
        args.goodbye_msg = args.goodbye_msg.lower() == 'yes'
    if args.digest:
        args.digest = args.digest.lower() == 'yes'
    if args.notifyadmin:
        args.notifyadmin = args.notifyadmin.lower() == 'yes'
    
    return args


def main():
    args = parse_args()

    # Get the list name
    listname = args.listname

    # Get the list object
    try:
        mlist = MailList.MailList(listname, lock=1)
    except Errors.MMUnknownListError:
        usage(1, C_('No such list: %(listname)s'))

    # Get the members to sync
    members = []
    if args.file == '-':
        members = sys.stdin.read().splitlines()
    else:
        try:
            with open(args.file) as fp:
                members = fp.read().splitlines()
        except IOError:
            usage(1, C_('Cannot open file: %(file)s') %
                  {'file': args.file})

    # Process each member
    for member in members:
        member = member.strip()
        if not member or member.startswith('#'):
            continue
        # Convert email address to lowercase
        member = member.lower()
        try:
            mlist.SyncMember(member, args.digest, args.moderate,
                           args.text, args.userack, args.notifyadmin,
                           args.welcome_msg, args.language)
        except Errors.MMAlreadyAMember:
            print(C_('%(member)s is already a member of %(listname)s'))
        except Errors.MMHostileAddress:
            print(C_('%(member)s is a hostile address'))
        except Errors.MMInvalidEmailAddress:
            print(C_('%(member)s is not a valid email address'))
        except Errors.MMBadEmailError:
            print(C_('%(member)s is not a valid email address'))
        except Errors.MMListError as e:
            print(C_('%(member)s: %(error)s'))

    mlist.Save()
    mlist.Unlock()


if __name__ == '__main__':
    main()
