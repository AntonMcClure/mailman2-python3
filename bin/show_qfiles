#! @PYTHON@
#
# Copyright (C) 2006-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

"""Show the contents of one or more Mailman queue files.

Usage: show_qfiles [options] qfile ...

Options:

    -q / --quiet
        Don't print `helpful' message delimiters.

    -h / --help
        Print this text and exit.

Example: show_qfiles qfiles/shunt/*.pck
"""
from __future__ import print_function

import sys
import argparse
from pickle import load
import pickle

import paths
from Mailman.i18n import C_


def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    print(C_(__doc__), file=fd)
    if msg:
        print(msg, file=fd)
    sys.exit(code)


def main():
    parser = argparse.ArgumentParser(description='Show the contents of one or more Mailman queue files.')
    parser.add_argument('qfiles', nargs='+', help='Queue files to display')
    parser.add_argument('-q', '--quiet', action='store_true',
                       help='Don\'t print helpful message delimiters')

    args = parser.parse_args()

    for filename in args.qfiles:
        if not args.quiet:
            print(('====================>', filename))
        if filename.endswith(".pck"):
            try:
                with open(filename, 'rb') as fp:
                    try:
                        # Try UTF-8 first for newer files
                        msg = load(fp, fix_imports=True, encoding='utf-8')
                        data = load(fp, fix_imports=True, encoding='utf-8')
                    except (UnicodeDecodeError, pickle.UnpicklingError):
                        # Fall back to latin1 for older files
                        fp.seek(0)
                        msg = load(fp, fix_imports=True, encoding='latin1')
                        data = load(fp, fix_imports=True, encoding='latin1')
                    if data.get('_parsemsg'):
                        sys.stdout.write(msg)
                    else:
                        sys.stdout.write(msg.as_string())
            except Exception as e:
                print('Error reading pickle file %s: %s' % (filename, str(e)), file=sys.stderr)
                sys.exit(1)
        else:
            with open(filename) as fp:
                sys.stdout.write(fp.read())


if __name__ == '__main__':
    main()
