#! @PYTHON@
#
# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

"""List all the members of a mailing list.

Usage: %(PROGRAM)s [options] listname

Where:

    --output file
    -o file
        Write output to specified file instead of standard out.

    --regular / -r
        Print just the regular (non-digest) members.

    --digest[=kind] / -d [kind]
        Print just the digest members.  Optional argument can be "mime" or
        "plain" which prints just the digest members receiving that kind of
        digest.

    --nomail[=why] / -n [why]
        Print the members that have delivery disabled.  Optional argument can
        be "byadmin", "byuser", "bybounce", or "unknown" which prints just the
        users who have delivery disabled for that reason.  It can also be
        "enabled" which prints just those member for whom delivery is
        enabled.

    --fullnames / -f
        Include the full names in the output.

    --preserve / -p
        Output member addresses case preserved the way they were added to the
        list.  Otherwise, addresses are printed in all lowercase.

    --moderated / -m
        Print just the moderated members.  Ignores -r, -d, -n.

    --non-moderated / -M
        Print just the non-moderated members.  Ignores -r, -d, -n.

    --invalid / -i
        Print only the addresses in the membership list that are invalid.
        Ignores -r, -d, -n.

    --unicode / -u
        Print addresses which are stored as Unicode objects instead of normal
        string objects.  Ignores -r, -d, -n.

    --help
    -h
        Print this help message and exit.

    listname is the name of the mailing list to use.

Note that if neither -r or -d is supplied, regular members are printed first,
followed by digest members, but no indication is given as to address status.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import sys
import argparse

import paths
from Mailman import mm_cfg
from Mailman import Utils
from Mailman import MailList
from Mailman import Errors
from Mailman import MemberAdaptor
from Mailman.i18n import C_

from email.utils import formataddr

PROGRAM = sys.argv[0]
ENC = sys.getdefaultencoding()
COMMASPACE = ', '

WHYCHOICES = {'enabled' : MemberAdaptor.ENABLED,
              'unknown' : MemberAdaptor.UNKNOWN,
              'byuser'  : MemberAdaptor.BYUSER,
              'byadmin' : MemberAdaptor.BYADMIN,
              'bybounce': MemberAdaptor.BYBOUNCE,
              }


def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    # Ensure PROGRAM is a string, not bytes
    if isinstance(PROGRAM, bytes):
        PROGRAM = PROGRAM.decode('utf-8', 'replace')
    print(C_(__doc__), file=fd)
    if msg:
        print(msg, file=fd)
    sys.exit(code)


def isinvalid(addr):
    try:
        Utils.ValidateEmail(addr)
        return False
    except Errors.EmailAddressError:
        return True

def isunicode(addr):
    return isinstance(addr, str)


def whymatches(mlist, addr, why):
    # Return true if the `why' matches the reason the address is enabled, or
    # in the case of why is None, that they are disabled for any reason
    # (i.e. not enabled).
    status = mlist.getDeliveryStatus(addr)
    if why is None:
        return status != MemberAdaptor.ENABLED
    return status == WHYCHOICES[why]


def main():
    parser = argparse.ArgumentParser(description='List all the members of a mailing list.')
    parser.add_argument('listname', help='Name of the mailing list')
    parser.add_argument('-o', '--output', help='Write output to specified file instead of standard out')
    parser.add_argument('-r', '--regular', action='store_true', help='Print just the regular (non-digest) members')
    parser.add_argument('-d', '--digest', choices=['mime', 'plain'], nargs='?', const=True, help='Print just the digest members')
    parser.add_argument('-n', '--nomail', choices=list(WHYCHOICES.keys()), nargs='?', const=True, help='Print members with delivery disabled')
    parser.add_argument('-f', '--fullnames', action='store_true', help='Include the full names in the output')
    parser.add_argument('-p', '--preserve', action='store_true', help='Output member addresses case preserved')
    parser.add_argument('-m', '--moderated', action='store_true', help='Print just the moderated members')
    parser.add_argument('-M', '--non-moderated', action='store_true', help='Print just the non-moderated members')
    parser.add_argument('-i', '--invalid', action='store_true', help='Print only invalid addresses')
    parser.add_argument('-u', '--unicode', action='store_true', help='Print addresses stored as Unicode objects')

    args = parser.parse_args()

    # Validate mutually exclusive options
    if sum([args.moderated, args.non_moderated, args.invalid, args.unicode]) > 1:
        parser.error('Only one of -m, -M, -i or -u may be specified.')

    if args.output:
        try:
            fp = open(args.output, 'w')
        except IOError:
            print(C_('Could not open file for writing:'), args.output, file=sys.stderr)
            sys.exit(1)
    else:
        fp = sys.stdout

    try:
        mlist = MailList.MailList(args.listname.lower().strip(), lock=False)
    except Errors.MMListError as e:
        print(C_('No such list: %(listname)s'), file=sys.stderr)
        sys.exit(1)

    # Get the lowercased member addresses
    rmembers = mlist.getRegularMemberKeys()
    dmembers = mlist.getDigestMemberKeys()

    if args.preserve:
        # Convert to the case preserved addresses
        rmembers = mlist.getMemberCPAddresses(rmembers)
        dmembers = mlist.getMemberCPAddresses(dmembers)

    if args.invalid or args.unicode or args.moderated or args.non_moderated:
        all = rmembers + dmembers
        all.sort()
        for addr in all:
            name = args.fullnames and mlist.getMemberName(addr) or ''
            showit = False
            if args.invalid and isinvalid(addr):
                showit = True
            if args.unicode and isunicode(addr):
                showit = True
            if args.moderated and mlist.getMemberOption(addr, mm_cfg.Moderate):
                showit = True
            if args.non_moderated and not mlist.getMemberOption(addr, mm_cfg.Moderate):
                showit = True
            if showit:
                print(formataddr((name, addr)), file=fp)
        return

    if args.regular or not args.digest:
        rmembers.sort()
        for addr in rmembers:
            name = args.fullnames and mlist.getMemberName(addr) or ''
            # Filter out nomails
            if args.nomail and not whymatches(mlist, addr, args.nomail):
                continue
            print(formataddr((name, addr)), file=fp)

    if args.digest or not args.regular:
        dmembers.sort()
        for addr in dmembers:
            name = args.fullnames and mlist.getMemberName(addr) or ''
            # Filter out nomails
            if args.nomail and not whymatches(mlist, addr, args.nomail):
                continue
            # Filter out digest kinds
            if mlist.getMemberOption(addr, mm_cfg.DisableMime):
                # They're getting plain text digests
                if args.digest == 'mime':
                    continue
            else:
                # They're getting MIME digests
                if args.digest == 'plain':
                    continue
            print(formataddr((name, addr)), file=fp)


if __name__ == '__main__':
    main()
