#! @PYTHON@
#
# Copyright (C) 2002-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

"""List the owners of a mailing list, or all mailing lists.

Usage: %(PROGRAM)s [options] [listname ...]
Options:

    -w / --with-listnames
        Group the owners by list names and include the list names in the
        output.  Otherwise, the owners will be sorted and uniquified based on
        the email address.

    -m / --moderators
        Include the list moderators in the output.

    -h / --help
        Print this help message and exit.

    listname
        Print the owners of the specified lists.  More than one can appear
        after the options.  If there are no listnames provided, the owners of
        all the lists will be displayed.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from builtins import *
import sys
import argparse

import paths
from Mailman import Utils
from Mailman.MailList import MailList
from Mailman.i18n import C_

PROGRAM = sys.argv[0]


def usage(code, msg=''):
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    # Ensure PROGRAM is a string, not bytes
    if isinstance(PROGRAM, bytes):
        PROGRAM = PROGRAM.decode('utf-8', 'replace')
    print(C_(__doc__), file=fd)
    if msg:
        print(msg, file=fd)
    sys.exit(code)


def main():
    parser = argparse.ArgumentParser(description='List the owners of a mailing list, or all mailing lists.')
    parser.add_argument('listnames', nargs='*', help='Print the owners of the specified lists')
    parser.add_argument('-w', '--with-listnames', action='store_true',
                       help='Group the owners by list names and include the list names in the output')
    parser.add_argument('-m', '--moderators', action='store_true',
                       help='Include the list moderators in the output')

    args = parser.parse_args()

    listnames = [x.lower() for x in args.listnames] or Utils.list_names()
    bylist = {}

    for listname in listnames:
        mlist = MailList(listname, lock=0)
        addrs = mlist.owner[:]
        if args.moderators:
            addrs.extend(mlist.moderator)
        bylist[listname] = addrs

    if args.with_listnames:
        for listname in listnames:
            unique = {}
            for addr in bylist[listname]:
                unique[addr] = 1
            keys = list(unique.keys())
            keys.sort()
            print(listname)
            for k in keys:
                print('\t', k)
    else:
        unique = {}
        for listname in listnames:
            for addr in bylist[listname]:
                unique[addr] = 1
        keys = list(unique.keys())
        keys.sort()
        for k in keys:
            print(k)


if __name__ == '__main__':
    main()
