#! @PYTHON@
#
# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

"""Dump the contents of any Mailman `database' file.

Usage: %(PROGRAM)s [options] filename

Options:

    --marshal/-m
        Assume the file contains a Python marshal, overridding any automatic
        guessing.

    --pickle/-p
        Assume the file contains a Python pickle, overridding any automatic
        guessing.

    --noprint/-n
        Don't attempt to pretty print the object.  This is useful if there's
        some problem with the object and you just want to get an unpickled
        representation.  Useful with `python -i bin/dumpdb <file>'.  In that
        case, the root of the tree will be left in a global called "msg".

    --help/-h
        Print this help message and exit

If the filename ends with `.db', then it is assumed that the file contains a
Python marshal.  If the file ends with `.pck' then it is assumed to contain a
Python pickle.  In either case, if you want to override the default assumption
-- or if the file ends in neither suffix -- use the -p or -m flags.
"""

import sys
import argparse
import pprint
import pickle
import marshal

import paths
# Import this /after/ paths so that the sys.path is properly hacked
from Mailman.i18n import C_

PROGRAM = sys.argv[0]
COMMASPACE = ', '


def parse_args():
    parser = argparse.ArgumentParser(description='Dump the contents of any Mailman `database\' file.')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-m', '--marshal', action='store_true',
                      help='Assume the file contains a Python marshal')
    group.add_argument('-p', '--pickle', action='store_true',
                      help='Assume the file contains a Python pickle')
    parser.add_argument('-n', '--noprint', action='store_true',
                      help='Don\'t attempt to pretty print the object')
    parser.add_argument('filename',
                      help='The database file to dump')
    return parser.parse_args()


def load_pickle(fp):
    """Load a pickle file with Python 2/3 compatibility."""
    try:
        return pickle.load(fp, fix_imports=True, encoding='latin1')
    except Exception as e:
        print('Error loading pickle file: %s' % e)
        return None


def main():
    args = parse_args()

    # Determine file type
    if args.marshal:
        filetype = 1  # marshal
    elif args.pickle:
        filetype = 0  # pickle
    else:
        if args.filename.endswith('.db'):
            filetype = 1  # marshal
        elif args.filename.endswith('.pck'):
            filetype = 0  # pickle
        else:
            print(C_('Please specify either -p or -m.'), file=sys.stderr)
            sys.exit(1)

    # Handle dbs
    pp = pprint.PrettyPrinter(indent=4)
    if filetype == 1:
        load = marshal.load
        typename = 'marshal'
    else:
        load = load_pickle
        typename = 'pickle'
    fp = open(args.filename, 'rb')
    m = []
    try:
        cnt = 1
        if not args.noprint:
            print(C_('[----- start %(typename)s file -----]'))
        while True:
            try:
                obj = load(fp)
                # Handle string/bytes conversion
                if isinstance(obj, bytes):
                    obj = obj.decode('utf-8', 'replace')
                elif isinstance(obj, dict):
                    new_obj = {}
                    for k, v in obj.items():
                        if isinstance(k, bytes):
                            k = k.decode('utf-8', 'replace')
                        if isinstance(v, bytes):
                            v = v.decode('utf-8', 'replace')
                        new_obj[k] = v
                    obj = new_obj
                elif isinstance(obj, list):
                    new_obj = []
                    for item in obj:
                        if isinstance(item, bytes):
                            item = item.decode('utf-8', 'replace')
                        new_obj.append(item)
                    obj = new_obj
            except EOFError:
                if not args.noprint:
                    print(C_('[----- end %(typename)s file -----]'))
                break
            if not args.noprint:
                print(C_('<----- start object %(cnt)s ----->'))
                if isinstance(obj, str):
                    print(obj)
                else:
                    pp.pprint(obj)
            cnt += 1
            m.append(obj)
    finally:
        fp.close()
    return m


if __name__ == '__main__':
    msg = main()
