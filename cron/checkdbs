#! @PYTHON@
#
# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

"""Check for pending admin requests and mail the list owners if necessary.

Usage: %(PROGRAM)s [options]

Options:

    -h/--help
        Print this message and exit.
"""

import sys
import time
import argparse
import traceback

import paths

# Import this after paths so we get Mailman's copy of the email package
from email.charset import Charset

from Mailman import mm_cfg
from Mailman import Utils
from Mailman import MailList
from Mailman.Message import UserNotification
from Mailman import i18n
from Mailman.Logging.Syslog import mailman_log

# Work around known problems with some RedHat cron daemons
import signal
signal.signal(signal.SIGCHLD, signal.SIG_DFL)

NL = '\n'
PROGRAM = sys.argv[0]

_ = i18n._
i18n.set_language(mm_cfg.DEFAULT_SERVER_LANGUAGE)

now = time.time()


def parse_args():
    parser = argparse.ArgumentParser(description='Check for pending admin requests and mail the list owners if necessary.')
    return parser.parse_args()


def main():
    args = parse_args()
    processed = 0
    errors = 0

    for name in Utils.list_names():
        # the list must be locked in order to open the requests database
        try:
            mlist = MailList.MailList(name)
            try:
                count = mlist.NumRequestsPending()
                # While we're at it, let's evict yesterday's autoresponse data
                midnightToday = Utils.midnight()
                evictions = []
                for sender in mlist.hold_and_cmd_autoresponses.keys():
                    date, respcount = mlist.hold_and_cmd_autoresponses[sender]
                    if Utils.midnight(date) < midnightToday:
                        evictions.append(sender)
                if evictions:
                    for sender in evictions:
                        del mlist.hold_and_cmd_autoresponses[sender]
                    # Only here have we changed the list's database
                    mlist.Save()
                if count:
                    i18n.set_language(mlist.preferred_language)
                    realname = mlist.real_name
                    discarded = auto_discard(mlist)
                    if discarded:
                        count = count - discarded
                        text = _(
                 'Notice: %(discarded)d old request(s) automatically expired.\n\n')
                    else:
                        text = ''
                    if count:
                        text += str(Utils.maketext(
                            'checkdbs.txt',
                            {'count'    : count,
                             'host_name': mlist.host_name,
                             'adminDB'  : mlist.GetScriptURL('admindb', absolute=1),
                             'real_name': realname,
                             }, mlist=mlist))
                        text += '\n' + pending_requests(mlist)
                        subject = _('%(count)d %(realname)s moderator request(s) waiting') % {
                            'count': count,
                            'realname': realname
                        }
                    else:
                        subject = _('%(realname)s moderator request check result') % {
                            'realname': realname
                        }
                    try:
                        # Get the charset for the list's language
                        charset = Utils.GetCharSet(mlist.preferred_language)
                        msg = UserNotification(mlist.GetOwnerEmail(),
                                             mlist.GetBouncesEmail(),
                                             subject, text,
                                             mlist.preferred_language)
                        msg.send(mlist, **{'tomoderators': 1})
                        processed += 1
                    except Exception as e:
                        mailman_log('error', 'Failed to send notification for list %s: %s\n%s',
                                  name, str(e), traceback.format_exc())
                        errors += 1
            finally:
                mlist.Unlock()
        except Exception as e:
            mailman_log('error', 'Error processing list %s: %s\n%s',
                       name, str(e), traceback.format_exc())
            errors += 1

    if errors:
        mailman_log('error', 'checkdbs completed with %d errors, processed %d lists',
                   errors, processed)
    else:
        mailman_log('info', 'checkdbs completed successfully, processed %d lists',
                   processed)


def pending_requests(mlist):
    # Must return a string
    lcset = Utils.GetCharSet(mlist.preferred_language)
    pending = []
    first = 1
    try:
        for id in mlist.GetSubscriptionIds():
            if first:
                pending.append(_('Pending subscriptions:'))
                first = 0
            try:
                when, addr, fullname, passwd, digest, lang = mlist.GetRecord(id)
                if fullname:
                    if isinstance(fullname, bytes):
                        fullname = fullname.decode(lcset, 'replace')
                    fullname = ' (%s)' % fullname
                pending.append('    %s%s %s' % (addr, fullname, time.ctime(when)))
            except Exception as e:
                mailman_log('error', 'Error processing subscription record %d: %s\n%s',
                           id, str(e), traceback.format_exc())
                continue

        first = 1
        for id in mlist.GetUnsubscriptionIds():
            if first:
                pending.append(_('Pending unsubscriptions:'))
                first = 0
            try:
                addr = mlist.GetRecord(id)
                pending.append('    %s' % addr)
            except Exception as e:
                mailman_log('error', 'Error processing unsubscription record %d: %s\n%s',
                           id, str(e), traceback.format_exc())
                continue

        first = 1
        for id in mlist.GetHeldMessageIds():
            if first:
                pending.append(_('\nPending posts:'))
                first = 0
            try:
                info = mlist.GetRecord(id)
                when, sender, subject, reason, text, msgdata = mlist.GetRecord(id)
                subject = Utils.oneline(subject, lcset)
                if isinstance(subject, bytes):
                    subject = subject.decode(lcset, 'replace')
                date = time.ctime(when)
                reason = _(reason)
                pending.append(_("""\
From: %(sender)s on %(date)s
Subject: %(subject)s
Cause: %(reason)s""") % {
                    'sender': sender,
                    'date': date,
                    'subject': subject,
                    'reason': reason
                })
                pending.append('')
            except Exception as e:
                mailman_log('error', 'Error processing held message record %d: %s\n%s',
                           id, str(e), traceback.format_exc())
                continue
    except Exception as e:
        mailman_log('error', 'Error in pending_requests: %s\n%s',
                   str(e), traceback.format_exc())
        return _('Error retrieving pending requests')
    
    # Join all lines with newlines and return as a string
    return '\n'.join(pending)


def auto_discard(mlist):
    # Discard old held messages
    discard_count = 0
    expire = mlist.max_days_to_hold * 86400 # days
    heldmsgs = mlist.GetHeldMessageIds()
    if expire and len(heldmsgs):
        current_time = time.time()
        for id in heldmsgs:
            try:
                if current_time - mlist.GetRecord(id)[0] > expire:
                    mlist.HandleRequest(id, mm_cfg.DISCARD)
                    discard_count += 1
            except Exception as e:
                mailman_log('error', 'Error auto-discarding message %d: %s\n%s',
                           id, str(e), traceback.format_exc())
                continue
        if discard_count:
            mlist.Save()
    return discard_count


if __name__ == '__main__':
    main()
