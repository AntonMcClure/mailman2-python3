#! @PYTHON@
#
# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

"""Send password reminders for all lists to all users.

This program scans all mailing lists and collects users and their passwords,
grouped by the list's host_name if mm_cfg.VIRTUAL_HOST_OVERVIEW is true.  Then
one email message is sent to each unique user (per-virtual host) containing
the list passwords and options url for the user.  The password reminder comes
from the mm_cfg.MAILMAN_SITE_LIST, which must exist.

Usage: %(PROGRAM)s [options]

Options:
    -l listname
    --listname=listname
        Send password reminders for the named list only.  If omitted,
        reminders are sent for all lists.  Multiple -l/--listname options are
        allowed.

    -t email
    --test=email
        Test mode: Send password reminders to the specified email address
        instead of the actual list members. Useful for testing the reminder
        format and content.

    -v
    --verbose
        Verbose mode: Display message content and recipient information
        before sending.

    -h/--help
        Print this message and exit.
"""

# This puppy should probably do lots of logging.
import sys
import os
import errno
import argparse
import random

import paths
# mm_cfg must be imported before the other modules, due to the side-effect of
# it hacking sys.paths to include site-packages.  Without this, running this
# script from cron with python -S will fail.
from Mailman import mm_cfg
from Mailman import MailList
from Mailman import Errors
from Mailman import Utils
from Mailman.Message import Message
from Mailman import i18n
from Mailman.Logging.Syslog import syslog

# Work around known problems with some RedHat cron daemons
import signal
signal.signal(signal.SIGCHLD, signal.SIG_DFL)

NL = '\n'
PROGRAM = sys.argv[0]

_ = i18n._


def tounicode(s, enc):
    if isinstance(s, str):
        return s
    try:
        return str(s, enc, 'replace')
    except (UnicodeDecodeError, LookupError):
        # Try Latin-1 as fallback
        return str(s, 'latin-1', 'replace')


def parse_args():
    parser = argparse.ArgumentParser(description='Send password reminders for all lists to all users.')
    parser.add_argument('-l', '--listname', action='append',
                       help='Send password reminders for the named list only')
    parser.add_argument('-t', '--test', metavar='email',
                       help='Test mode: Send to specified email address instead of members')
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Verbose mode: Display message content and recipient information')
    return parser.parse_args()


def main():
    args = parse_args()

    listnames = args.listname
    if listnames is None:
        listnames = Utils.list_names()

    # This is the list that all the reminders will look like they come from,
    # but with the host name coerced to the virtual host we're processing.
    try:
        sitelist = MailList.MailList(mm_cfg.MAILMAN_SITE_LIST, lock=0)
    except Errors.MMUnknownListError:
        # Do it this way for I18n's _()
        sitelistname = mm_cfg.MAILMAN_SITE_LIST
        print(_('Site list is missing: %(sitelistname)s'), file=sys.stderr)
        syslog('error', 'Site list is missing: %s', mm_cfg.MAILMAN_SITE_LIST)
        sys.exit(1)

    # Group lists by host_name if VIRTUAL_HOST_OVERVIEW is true, otherwise
    # there's only one key in this dictionary: mm_cfg.DEFAULT_EMAIL_HOST.  The
    # values are lists of the unlocked MailList instances.
    byhost = {}
    skipped_lists = []
    for listname in listnames:
        try:
            if args.verbose:
                print(f"\nProcessing list: {listname}")
            mlist = MailList.MailList(listname, lock=0)
            # Handle potential bytes in list configuration
            listname = tounicode(listname, 'latin-1')
            if isinstance(mlist.real_name, bytes):
                mlist.real_name = tounicode(mlist.real_name, 'latin-1')
            if isinstance(mlist.internal_name(), bytes):
                mlist.internal_name = tounicode(mlist.internal_name(), 'latin-1')
            if not mlist.send_reminders:
                if args.verbose:
                    print(f"Skipping list {listname} - password reminders disabled")
                skipped_lists.append((listname, "password reminders disabled"))
                continue
            if mm_cfg.VIRTUAL_HOST_OVERVIEW:
                host = mlist.host_name
                if isinstance(host, bytes):
                    host = tounicode(host, 'latin-1')
            else:
                # See the note in Defaults.py concerning DEFAULT_HOST_NAME
                # vs. DEFAULT_EMAIL_HOST.
                host = mm_cfg.DEFAULT_HOST_NAME or mm_cfg.DEFAULT_EMAIL_HOST
                if isinstance(host, bytes):
                    host = tounicode(host, 'latin-1')
            byhost.setdefault(host, []).append(mlist)
        except Exception as e:
            if args.verbose:
                print(f"Error processing list {listname}: {str(e)}")
            skipped_lists.append((listname, str(e)))
            continue

    # If we're in test mode and no lists were found, show a message
    if args.test and not byhost:
        print(f"No lists found for test email {args.test}")
        if skipped_lists:
            print("\nSkipped lists:")
            for listname, reason in skipped_lists:
                print(f"  {listname}: {reason}")
        sys.exit(0)

    # Now for each virtual host, collate the user information.  Each user
    # entry has the form (listaddr, password, optionsurl)
    for host in byhost.keys():
        # Site owner is `mailman@dom.ain'
        userinfo = {}
        for mlist in byhost[host]:
            listaddr = mlist.GetListEmail()
            if args.verbose:
                print(f"\nProcessing list: {mlist.internal_name()}")
            # In test mode, we'll use the test email address for all lists
            if args.test:
                member = args.test
                try:
                    # Try to get the member's password if they are a member
                    if args.verbose:
                        print(f"  Checking membership for: {member}")
                    try:
                        password = mlist.getMemberPassword(member)
                        if args.verbose:
                            print(f"  Found password for member")
                    except Errors.NotAMemberError:
                        # Silently skip if not a member in test mode
                        continue
                    try:
                        optionsurl = mlist.GetOptionsURL(member)
                        if args.verbose:
                            print(f"  Got options URL: {optionsurl}")
                    except Errors.NotAMemberError:
                        # If we can't get the options URL, use a default one
                        optionsurl = f"{mlist.GetBaseURL()}/options/{mlist.internal_name()}"
                        if args.verbose:
                            print(f"  Using default options URL: {optionsurl}")
                    # Use the list's default language
                    lang = mlist.preferred_language
                    info = (listaddr, password, optionsurl, lang)
                    userinfo.setdefault(member, []).append(info)
                except Exception as e:
                    if args.verbose:
                        print(f"  Error processing list {mlist.internal_name()}: {str(e)}")
                    skipped_lists.append((mlist.internal_name(), str(e)))
                    continue
            else:
                # Normal mode - process all members
                for member in mlist.getMembers():
                    # The user may have disabled reminders for this list
                    if mlist.getMemberOption(member,
                                             mm_cfg.SuppressPasswordReminder):
                        continue
                    # Group by the lower-cased address, since Mailman always
                    # treates person@dom.ain the same as PERSON@dom.ain.
                    try:
                        password = mlist.getMemberPassword(member)
                    except Errors.NotAMemberError:
                        # Silently skip members without passwords
                        continue
                    try:
                        optionsurl = mlist.GetOptionsURL(member)
                    except Errors.NotAMemberError:
                        # If we can't get the options URL, use a default one
                        optionsurl = f"{mlist.GetBaseURL()}/options/{mlist.internal_name()}"
                    lang = mlist.getMemberLanguage(member)
                    info = (listaddr, password, optionsurl, lang)
                    userinfo.setdefault(member, []).append(info)

        # If we're in test mode and no user info was collected, show a message
        if args.test and not userinfo:
            print(f"No valid list memberships found for test email {args.test}")
            if skipped_lists:
                print("\nSkipped lists:")
                for listname, reason in skipped_lists:
                    print(f"  {listname}: {reason}")
            continue

        # Now that we've collected user information for this host, send each
        # user the password reminder.
        for addr in userinfo.keys():
            # If the person is on more than one list, it is possible that they
            # have different preferred languages, and there's no good way to
            # know which one they want their password reminder in.  Pick the
            # most popular, and break the tie randomly.
            #
            # Also, we need an example -request address for cronpass.txt and
            # again, there's no clear winner.  Just take the first one in this
            # case.
            table = []
            langs = {}
            for listaddr, password, optionsurl, lang in userinfo[addr]:
                langs[lang] = langs.get(lang, 0) + 1
                # If the list address is really long, break it across two
                # lines.
                if len(listaddr) > 39:
                    fmt = '%s\n           %-10s\n%s\n'
                else:
                    fmt = '%-40s %-10s\n%s\n'
                table.append(fmt % (listaddr, password, optionsurl))
            # Figure out which language to use
            langcnt = 0
            poplang = None
            for lang, cnt in langs.items():
                if cnt > langcnt:
                    poplang = lang
                    langcnt = cnt
            enc = Utils.GetCharSet(poplang)
            # Now we're finally ready to send the email!
            siteowner = Utils.get_site_email(host, 'owner')
            sitereq = Utils.get_site_email(host, 'request')
            sitebounce = Utils.get_site_email(host, 'bounces')
            text = Utils.maketext(
                'cronpass.txt',
                {'hostname': host,
                 'useraddr': addr,
                 'exreq'   : sitereq,
                 'owner'   : siteowner,
                 }, lang=poplang)
            # Coerce everything to Unicode
            text = tounicode(text, enc)
            table = [tounicode(_t, enc) for _t in table]
            # Translate the message and headers to user's suggested lang
            otrans = i18n.get_translation()
            try:
                i18n.set_language(poplang)
                # Craft table header after language was set
                header = '%-40s %-10s\n%-40s %-10s' % (
                         _('List'), _('Password // URL'), '----', '--------')
                header = tounicode(header, enc)
                # Add the table to the end so it doesn't get wrapped/filled
                text += (header + '\n' + NL.join(table))
                if args.test:
                    # In test mode, add a note that this is a test message
                    text += "\n\n[TEST MODE] This is a test password reminder message."
                # Ensure host is properly decoded
                if isinstance(host, bytes):
                    host = tounicode(host, 'latin-1')
                msg = Message.UserNotification(
                    addr, siteowner,
                    _('%(host)s mailing list memberships reminder') % {'host': host},
                    text.encode(enc, 'replace'), poplang)
                # Note that text must be encoded into 'enc' because unicode
                # cause error within email module in some language (Japanese).
            finally:
                i18n.set_translation(otrans)
            msg['X-No-Archive'] = 'yes'
            del msg['auto-submitted']
            msg['Auto-Submitted'] = 'auto-generated'
            if args.test:
                # In test mode, add a test header
                msg['X-Mailman-Test-Mode'] = 'yes'

            if args.verbose:
                print("\n=== Password Reminder Message ===")
                print(f"To: {addr}")
                print(f"From: {siteowner}")
                print(f"Subject: {msg['Subject']}")
                print("\nMessage Content:")
                print("-" * 50)
                print(text)
                print("-" * 50)
                if not args.test:
                    print("\nPress Enter to send (or Ctrl+C to abort)...")
                    try:
                        input()
                    except KeyboardInterrupt:
                        print("\nAborted.")
                        sys.exit(1)

            # We want to make this look like it's coming from the siteowner's
            # list, but we also want to be sure that the apparent host name is
            # the current virtual host.  Look in CookHeaders.py for why this
            # trick works.  Blarg.
            msg.send(sitelist, **{'errorsto': sitebounce,
                                  '_nolist' : 1,
                                  'verp'    : mm_cfg.VERP_PASSWORD_REMINDERS,
                                  })


if __name__ == '__main__':
    main()
