# Copyright (C) 1998-2018 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software 
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# NOTE: Makefile.in is converted into Makefile by the configure script
# in the parent directory.  Once configure has run, you can recreate
# the Makefile by running just config.status.

# Variables set by configure

SHELL=		/bin/sh

srcdir=		.
bindir=		${exec_prefix}/bin
prefix=		/usr/local/mailman
exec_prefix=	${prefix}
var_prefix=	/usr/local/mailman
DESTDIR=

CC=		gcc
INSTALL=	/usr/bin/install -c
PYTHON= 	/usr/bin/python3

DEFS=		-DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DHAVE_STRERROR=1 -DHAVE_SETREGID=1 -DHAVE_SYSLOG=1 -DHAVE_STDIO_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_STRINGS_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_UNISTD_H=1 -DSTDC_HEADERS=1 -DHAVE_STDIO_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_STRINGS_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_UNISTD_H=1 -DHAVE_SYSLOG_H=1 -DGETGROUPS_T=gid_t -DHAVE_VSNPRINTF=1

# Customizable but not set by configure

OPT=		-g -O2
CFLAGS=		-g -O2 $(OPT) $(DEFS)

VAR_DIRS= \
	logs archives lists locks data spam qfiles \
	archives/private archives/public

ARCH_INDEP_DIRS= \
	bin templates scripts cron pythonlib \
	Mailman Mailman/Cgi Mailman/Logging Mailman/Archiver \
	Mailman/Handlers Mailman/Queue Mailman/Bouncers	 \
	Mailman/MTA Mailman/Gui Mailman/Commands messages icons \
	tests tests/bounces tests/msgs

ARCH_DEP_DIRS=	cgi-bin mail

# Directories make should decend into
SUBDIRS=	bin cron misc Mailman scripts src templates messages tests

# Modes for directories and executables created by the install
# process.  Default to group-writable directories but
# user-only-writable for executables.
DIRMODE=	775
EXEMODE=	755
FILEMODE=	644
INSTALL_PROGRAM=$(INSTALL) -m $(EXEMODE)
DIRSETGID=	chmod g+s

DATE = $(shell python -c 'import time; print time.strftime("%d-%b-%Y"),')
LANGPACK = README-I18N.en templates messages
EXCLUDES = --exclude=CVS --exclude=.cvsignore --exclude=Makefile* --exclude=*.files --exclude=*.old --exclude=msgfmt-python2.py --exclude=pygettext.py

# Add these variables after the existing variable definitions
PYTHON_FILES = $(shell find . -name "*.py")
PYTHON_DIRS = $(shell find . -type d -name "Mailman")
INSTALLED_SCRIPTS = $(shell find $(DESTDIR)$(prefix)/bin -type f -executable 2>/dev/null || true)
SOURCE_SCRIPTS = $(shell find build/bin -type f -executable -name "*.py" 2>/dev/null || true)

# Detect number of CPUs for parallel builds
ifeq ($(shell uname -s),Darwin)
  NPROCS := $(shell sysctl -n hw.ncpu)
else
  NPROCS := $(shell nproc 2>/dev/null || echo 1)
endif

# Default to using all available CPUs for parallel builds
MAKEFLAGS += -j$(NPROCS)

# Add this function to check for script mismatches
define check_scripts
	@echo "Checking for script mismatches..."
	@for script in $(INSTALLED_SCRIPTS); do \
	    base_script=$$(basename $$script); \
	    if [ ! -f build/bin/$$base_script ]; then \
		echo "WARNING: Script $$base_script exists in installation but not in source"; \
	    fi; \
	done
	@for script in $(SOURCE_SCRIPTS); do \
	    base_script=$$(basename $$script); \
	    case "$$base_script" in \
		msgfmt-python2.py|pygettext.py) \
		    ;; \
		*) \
		    if [ ! -f $(DESTDIR)$(prefix)/bin/$$base_script ]; then \
			echo "WARNING: Script $$base_script exists in source but not in installation"; \
		    fi; \
		    ;; \
	    esac; \
	done
endef

# Rules

.PHONY: all build install clean distclean prepare-build clean-pyc doinstall update langpack

# Default target
all: prepare-build
	@for d in $(SUBDIRS); do \
		(cd $$d && $(MAKE) all) || exit 1; \
	done

# Build directory preparation
prepare-build:
	@echo "Preparing build directory..."
	@for d in $(SUBDIRS); do \
		dir=build/$$d; \
		if test ! -d $$dir; then \
			$(srcdir)/mkinstalldirs $$dir; \
		fi; \
		for f in $$d/*; do \
			if test -f $$f; then \
				if test ! -f build/$$f -o $$f -nt build/$$f; then \
					cp -p $$f build/$$f; \
				fi; \
			fi; \
		done; \
	done

build: all
	@echo "Building Python files..."
	@if [ -d "build" ]; then \
		$(PYTHON) -m compileall -q build; \
		$(PYTHON) -m compileall -q build/Mailman; \
		$(PYTHON) -m compileall -q build/bin; \
		$(PYTHON) -m compileall -q build/scripts; \
		$(PYTHON) -m compileall -q build/cron; \
		$(PYTHON) -m compileall -q build/misc; \
		$(PYTHON) -m compileall -q build/tests; \
	fi
	@echo "Build complete."

install: build
	@for d in $(SUBDIRS); do \
		(cd $$d && $(MAKE) install) || exit 1; \
	done
	@echo "Installation complete."

clean-pyc:
	@echo "Cleaning Python bytecode files..."
	@for d in $(PYTHON_DIRS); do \
	    if [ -d "$$d" ]; then \
		find "$$d" -name "*.pyc" -delete 2>/dev/null || true; \
		find "$$d" -name "*.pyo" -delete 2>/dev/null || true; \
		find "$$d" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true; \
	    fi; \
	done
	@if [ -d "build" ]; then \
	    find build -name "*.pyc" -delete 2>/dev/null || true; \
	    find build -name "*.pyo" -delete 2>/dev/null || true; \
	    find build -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true; \
	fi

doinstall: install clean-pyc
	@echo "Creating architecture independent directories..."
	@for d in $(VAR_DIRS); \
	do \
	    dir=$(DESTDIR)$(var_prefix)/$$d; \
	    if test ! -d $$dir; then \
		echo "Creating directory hierarchy $$dir"; \
		$(srcdir)/mkinstalldirs $$dir; \
		chmod $(DIRMODE) $$dir; \
		$(DIRSETGID) $$dir; \
	    else true; \
	    fi; \
	done
	chmod o-r $(DESTDIR)$(var_prefix)/archives/private
	@for d in $(ARCH_INDEP_DIRS); \
	do \
	    dir=$(DESTDIR)$(prefix)/$$d; \
	    if test ! -d $$dir; then \
		echo "Creating directory hierarchy $$dir"; \
		$(srcdir)/mkinstalldirs $$dir; \
		chmod $(DIRMODE) $$dir; \
		$(DIRSETGID) $$dir; \
	    else true; \
	    fi; \
	done
	@echo "Creating architecture dependent directories..."
	@for d in $(ARCH_DEP_DIRS); \
	do \
	    dir=$(DESTDIR)$(exec_prefix)/$$d; \
	    if test ! -d $$dir; then \
		echo "Creating directory hierarchy $$dir"; \
		$(srcdir)/mkinstalldirs $$dir; \
		chmod $(DIRMODE) $$dir; \
		$(DIRSETGID) $$dir; \
	    else true; \
	    fi; \
	done
	@echo "Installing Python files..."
	@for d in $(PYTHON_DIRS); do \
	    find $$d -name "*.py" -type f -print0 | while IFS= read -r -d '' f; do \
		install -D -m $(FILEMODE) "$$f" "$(DESTDIR)$(prefix)/$$f"; \
		touch "$(DESTDIR)$(prefix)/$$f"; \
	    done; \
	done
	@for d in $(SUBDIRS); \
	do \
	    (cd $$d; $(MAKE) DESTDIR=$(DESTDIR) install); \
	done

# Only run bin/update if we aren't installing in DESTDIR
update: install
	@(cd $(DESTDIR)$(prefix) ; test -n "$(DESTDIR)" || bin/update)

clean: clean-pyc
	@for d in $(SUBDIRS); \
	do \
	    (cd $$d; $(MAKE) clean); \
	done
	-rm -f update.log
	-rm -rf build
	-rm -f $(shell find . -name "*.pyc" 2>/dev/null || true)
	-rm -f $(shell find . -name "*.pyo" 2>/dev/null || true)

distclean: clean
	@for d in $(SUBDIRS); \
	do \
	    (cd $$d; $(MAKE) distclean); \
	done
	-rm -f config.cache config.log config.status Makefile

langpack:
	tar zcvf langpack-$(DATE).tgz $(EXCLUDES) $(LANGPACK)
